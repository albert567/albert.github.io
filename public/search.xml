<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JS跨域请求]]></title>
    <url>%2F2019%2F02%2F28%2FJS%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%2F</url>
    <content type="text"><![CDATA[首先js跨域请求是不安全的，可以通过前台调用后台服务器，通过后台httpclient请求url，返回结果。js跨域请求如下：前端js：12345678910111213$.ajax(&#123; async : false, url : url, type : &quot;GET&quot;, dataType : &quot;jsonp&quot;, // 返回的数据类型，设置为JSONP方式 jsonp : &quot;jsonpCallback&quot;, success : function(response) &#123; alert(&quot;请求成功&quot;); &#125;, error : function() &#123; alert(&quot;请求失败&quot;); &#125;&#125;); 后台使用jfinal框架:123String key = getPara(&quot;key&quot;);String jsonpCallback = getPara(&quot;jsonpCallback&quot;);renderJson(jsonpCallback+&quot;(&quot;+json+&quot;)&quot;);]]></content>
      <categories>
        <category>IT技术</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>javascript</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HttpClient工具类]]></title>
    <url>%2F2019%2F02%2F28%2FHttpClient%E5%B7%A5%E5%85%B7%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[引用自&gt; https://my.oschina.net/u/873047/blog/204634所需jar包： commons-cdec-1.9.jar commons-logging-1.2.jar fluent-hc-4.5.2.jar httpclient-4.5.2.jar httpclient-cache-4.5.2.jar httpclient-win-4.5.2.jar httpcore-4.4.4.jar httpmime-4.5.2.jar jna-4.1.0.jar jna-platform-4.1.0.jar 代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128import java.util.ArrayList;import java.util.List;import java.util.Map;import org.apache.http.HttpEntity;import org.apache.http.NameValuePair;import org.apache.http.client.config.RequestConfig;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClientBuilder;import org.apache.http.message.BasicNameValuePair;import org.apache.http.util.EntityUtils;public class HttpRequestUtils &#123; private static final CloseableHttpClient httpClient; public static final String CHARSET = &quot;UTF-8&quot;; static &#123; RequestConfig config = RequestConfig.custom().setConnectTimeout(60000).setSocketTimeout(15000).build(); httpClient = HttpClientBuilder.create().setDefaultRequestConfig(config).build(); &#125; public static String doGet(String url, Map&lt;String, String&gt; params)&#123; return doGet(url, params,CHARSET); &#125; public static String doPost(String url, Map&lt;String, String&gt; params)&#123; return doPost(url, params,CHARSET); &#125; /** * HTTP Get 获取内容 * @param url 请求的url地址 ?之前的地址 * @param params 请求的参数 * @param charset 编码格式 * @return 页面内容 */ public static String doGet(String url,Map&lt;String,String&gt; params,String charset)&#123; if(url==null||&quot;&quot;.equals(url))&#123; return null; &#125; try &#123; if(params != null &amp;&amp; !params.isEmpty())&#123; List&lt;NameValuePair&gt; pairs = new ArrayList&lt;NameValuePair&gt;(params.size()); for(Map.Entry&lt;String,String&gt; entry : params.entrySet())&#123; String value = entry.getValue(); if(value != null)&#123; pairs.add(new BasicNameValuePair(entry.getKey(),value)); &#125; &#125; url += &quot;?&quot; + EntityUtils.toString(new UrlEncodedFormEntity(pairs, charset)); &#125; HttpGet httpGet = new HttpGet(url); CloseableHttpResponse response = httpClient.execute(httpGet); int statusCode = response.getStatusLine().getStatusCode(); if (statusCode != 200) &#123; httpGet.abort(); throw new RuntimeException(&quot;HttpClient,error status code :&quot; + statusCode); &#125; HttpEntity entity = response.getEntity(); String result = null; if (entity != null)&#123; result = EntityUtils.toString(entity, &quot;utf-8&quot;); &#125; EntityUtils.consume(entity); response.close(); return result; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125; /** * HTTP Post 获取内容 * @param url 请求的url地址 ?之前的地址 * @param params 请求的参数 * @param charset 编码格式 * @return 页面内容 */ public static String doPost(String url,Map&lt;String,String&gt; params,String charset)&#123; if(url==null||&quot;&quot;.equals(url))&#123; return null; &#125; try &#123; List&lt;NameValuePair&gt; pairs = null; if(params != null &amp;&amp; !params.isEmpty())&#123; pairs = new ArrayList&lt;NameValuePair&gt;(params.size()); for(Map.Entry&lt;String,String&gt; entry : params.entrySet())&#123; String value = entry.getValue(); if(value != null)&#123; pairs.add(new BasicNameValuePair(entry.getKey(),value)); &#125; &#125; &#125; HttpPost httpPost = new HttpPost(url); if(pairs != null &amp;&amp; pairs.size() &gt; 0)&#123; httpPost.setEntity(new UrlEncodedFormEntity(pairs,CHARSET)); &#125; CloseableHttpResponse response = httpClient.execute(httpPost); int statusCode = response.getStatusLine().getStatusCode(); if (statusCode != 200) &#123; httpPost.abort(); throw new RuntimeException(&quot;HttpClient,error status code :&quot; + statusCode); &#125; HttpEntity entity = response.getEntity(); String result = null; if (entity != null)&#123; result = EntityUtils.toString(entity, &quot;utf-8&quot;); &#125; EntityUtils.consume(entity); response.close(); return result; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125; public static void main(String []args)&#123; String getData = doGet(&quot;http://www.baidu.com/&quot;,null); System.out.println(getData); System.out.println(&quot;----------------------分割线-----------------------&quot;); String postData = doPost(&quot;http://www.baidu.com/&quot;,null); System.out.println(postData); &#125;&#125;]]></content>
      <categories>
        <category>IT技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>HttpClient</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用命令]]></title>
    <url>%2F2019%2F02%2F27%2Fgit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[git常用命令1.如何配置你的身份123git config --global user.name &quot;Albert&quot;git config --global user.email &quot;albert@gmal.com&quot; 验证是否配置成功(只需要将最后的名字和邮箱地址去掉即可)123git config --global user.namegit config --global user.email 2.如何创建代码仓库 先进入到项目目录下面,执行命令:git init 仓库创建完成后,会在项目的根目录下生成一个隐藏的.git文件夹,可以通过ls -al命令来查看一下 3.如何提交本地代码 add是用于把想要提交的代码先添加进来,而commit则是真正地去执行提交操作,比如我们想要添加AndroidManifest.xml,可以输入一下命令:git add AndroidManifest.xml 添加目录也是这样,只需将文件名改成目录名即可.git add src 一次性把所有文件都添加好的命令如下:git add . 现在项目所有文件已经添加好了,我们来提交一下,输入如下命令:git commit -m &quot;First commit.&quot; 注意-m参数用来加上提交的描述信息. 4.如何把远程版本库克隆到本地git clone https://github.com/albert567/mobilesafe.git 5.如何将提交的内容同步到远程版本库git push https://github.com/albert567/mobilesafe.git master 同步时GitHub需要输入用户名和密码来进行身份校验. 注意,如果本地第一次同步远程版本库,需要先将远程版本库clone到本地,然后将.git和README.md拷贝到本地项目根目录,再执行add,commit命令 6.如何把文件从版本控制中删掉git rm res/layout/activity_main.xml 7.如何查看状态git status 8.如何查看所有分支git branch -a 9.如何添加分支git branch test //如果 test分支不存在,添加该分支 10.如何切换分支git checkout test //切换到test分支 11.如何删除分支git branch -d test //删除test分支 12.如何查看提交修改记录git log]]></content>
      <categories>
        <category>IT技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
