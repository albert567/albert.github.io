{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/bg.jpg","path":"images/bg.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/bg3.jpg","path":"images/bg3.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar_bak.gif","path":"images/avatar_bak.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/bg2.jpg","path":"images/bg2.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/custom.js","path":"js/src/custom.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/clipboard/clipboard-action.js","path":"lib/clipboard/clipboard-action.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/clipboard/clipboard.js","path":"lib/clipboard/clipboard.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551246429885},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1551234617215},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1551234617223},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1551234617216},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1551234617224},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1551234617226},{"_id":"source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1551242264411},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1551234617232},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1551234617228},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1551234617233},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1551234617229},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1551234617236},{"_id":"themes/next/_config.yml","hash":"9462f8860e16cec04f201618e4ba7fa30ad16873","modified":1551770484917},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1551234617241},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1551234617242},{"_id":"source/404/index.md","hash":"7217695cf88537228db30faa71b5c08e6c05c57c","modified":1551242087248},{"_id":"source/_posts/HttpClient工具类.md","hash":"068be69bb06271b3ddfbd1d3ae8694d758b6978b","modified":1551411754588},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1551234617412},{"_id":"source/_posts/HashMap源码篇.md","hash":"de27ed8d0615558c0327d5efa4aa8938ba680aab","modified":1552039920339},{"_id":"source/_posts/JS跨域请求.md","hash":"33ba7a0fe516ca071910fffaa2355d4931206f46","modified":1551411343126},{"_id":"source/about/index.md","hash":"d10e479df7ee3f16f017394f551a7c8762125276","modified":1551409127730},{"_id":"source/_posts/Redis相关.md","hash":"12384f28767fa5f3d5e37dd935c9acf6a942bab5","modified":1551681430366},{"_id":"source/catalogue/index.md","hash":"72abbb1e5cbb4980c781eea55e4ecc4b0d180c05","modified":1551409387234},{"_id":"source/categories/index.md","hash":"55dbd55b89a0d5d22ca8e0b66e8ee1243a65acf7","modified":1551410126030},{"_id":"source/tags/index.md","hash":"e7cd37a2f8803b363371d822f49e6ce3a72c1fcb","modified":1551243384183},{"_id":"source/_posts/git常用命令.md","hash":"6865508ae054c0e536b8050b8ed73dceaabebaa8","modified":1551410232159},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1551234617246},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1551234617245},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1551234617251},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1551234617248},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1551234617250},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1551234617252},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1551234617255},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1551234617261},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1551234617257},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1551234617265},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1551234617267},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1551234617259},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1551234617271},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1551234617263},{"_id":"themes/next/languages/zh-Hans.yml","hash":"25556defb6e9a181b0c951324d74739201b193cb","modified":1551246399159},{"_id":"themes/next/layout/_layout.swig","hash":"71bc2245d443bf88f576336cd06822b022852797","modified":1551246266152},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1551234617405},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1551234617403},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1551234617414},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1551234617273},{"_id":"themes/next/layout/index.swig","hash":"b6126f73dd522479e24f7c3f60ab322ba4405385","modified":1551403603979},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1551234617415},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1551234617407},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1551234617411},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1551234617409},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1551234617410},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1551234617666},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1551234617665},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1551234617667},{"_id":"source/_posts/Redis相关/1481291-20180925141429889-1694430603.png","hash":"0d337f905600e4fa6b993f84ce8e29a08e85a8b4","modified":1551679245479},{"_id":"source/_posts/Redis相关/1481291-20180925142100480-1152515615.png","hash":"5fd91656c50d636a9c53260b928ea67248c553ca","modified":1551679563436},{"_id":"themes/next/layout/_custom/custom.swig","hash":"2f5385106232b01d37e79adaf610a3731472e01c","modified":1551241942223},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1551234617275},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"9d43835a3404d9043142d33d5b79708665ab768e","modified":1551247795236},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"dcf92ac10a5fb5d40468f3f777d7d80fd3c1f29a","modified":1551237544199},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1551234617283},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1551234617281},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"8fdea44ab659ec20227c002e5d3f1cc17197cc99","modified":1551236244087},{"_id":"themes/next/layout/_macro/post.swig","hash":"28dcefa2609dc84e3265abd785c4902f01525e34","modified":1551340801995},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1551234617290},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1551234617287},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1551234617288},{"_id":"themes/next/layout/_partials/footer.swig","hash":"ca293c4b93b97fa47522f2102ec48fbc951b239c","modified":1551342071337},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1551234617293},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1551234617304},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1551234617306},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1551234617307},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1551234617324},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1551234617301},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1551234617325},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1551234617382},{"_id":"themes/next/layout/_partials/head.swig","hash":"3ff251f7de8524697ed4d39c2efdb950e81b81c4","modified":1551246553967},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1551234617381},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1551234617387},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1551234617336},{"_id":"themes/next/layout/_scripts/baidu_push.swig","hash":"413eac5b1d39022ee33da3a675ab608671fff583","modified":1551778684961},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1551234617418},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1551234617417},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1551234617420},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1551234617419},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1551234617421},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1551234617422},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1551234617423},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1551234617424},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1551234617424},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1551234617390},{"_id":"themes/next/source/fonts/.gitkeep","hash":"1a06a1ed52a8f7292a526d9d1b69ab25ea3e8c6d","modified":1551247008245},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1551234617526},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1551234617384},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1551234617386},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1551234617529},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1551234617529},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1551234617388},{"_id":"themes/next/source/images/bg.jpg","hash":"665b70af88d6ea6f1690fb82c447ca01d3d83a57","modified":1551249157333},{"_id":"themes/next/source/images/bg3.jpg","hash":"a0764af3de7a384a07322cd7745355042556df62","modified":1551247234014},{"_id":"themes/next/source/images/avatar_bak.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1551234617530},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1551234617533},{"_id":"themes/next/source/images/bg2.jpg","hash":"7f5a99eca0048cbb68dcdc9ad1b28acb45d7ee97","modified":1551247995966},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1551234617532},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1551234617531},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1551234617535},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1551234617537},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1551234617538},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1551234617536},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551234617541},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551234617539},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1551234617536},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1551234617543},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1551234617542},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1551234617540},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1551234617541},{"_id":"source/_posts/Redis相关/1481291-20180925142118041-1727225479.png","hash":"f43148ebe8aba706998a5aabc4a2aee6065e2c37","modified":1551679627069},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1551234617534},{"_id":"source/_posts/Redis相关/1481291-20180925142304757-1498788186.png","hash":"0b7e56e16cebf4a6f03f5b91167dbcd66f68ccef","modified":1551679912676},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551234617332},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551234617332},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551234617496},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551234617496},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551234617499},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551234617523},{"_id":"source/_posts/Redis相关/1481291-20180925141527592-2105439510.png","hash":"77d8b102569e50fb7f63eae97fa063d0e0ef44d3","modified":1551679424109},{"_id":"source/_posts/Redis相关/1481291-20180925142143478-1454265814.png","hash":"81e74d7db7ee040fa1cfe660e2b875fe23b94db4","modified":1551679714534},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1551234617314},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1551234617298},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1551234617319},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1551234617300},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1551234617309},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1551234617312},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1551234617321},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1551234617311},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1551234617340},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1551234617344},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1551234617342},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1551234617317},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1551234617348},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1551234617346},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1551234617350},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1551234617353},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1551234617354},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1551234617359},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1551234617358},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1551234617351},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1551234617356},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1551234617331},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1551234617334},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1551234617366},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1551234617361},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1551234617368},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1551234617364},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1551234617375},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1551234617371},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1551234617378},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1551234617328},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1551234617370},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1551234617373},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1551234617396},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1551234617377},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1551234617399},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1551234617402},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1551234617398},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1551234617496},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1551234617497},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"09044b46809936ff134a1b85391d17078d4aa4ae","modified":1551411172407},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1551234617523},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1551234617498},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1551234617522},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"7a7caac709d182816bcaf85b685b5a60dde6a5e3","modified":1551246926994},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1551234617524},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1551234617525},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1551234617545},{"_id":"source/_posts/Redis相关/1481291-20180925142206124-913246424.png","hash":"b3b49f1b2155031a438f9d13a8f6cf99fabc10ae","modified":1551679773333},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1551234617548},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1551234617546},{"_id":"themes/next/source/js/src/custom.js","hash":"0aaaa015344f39954d2d25072c85b0f9ef603784","modified":1551241907439},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1551234617547},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1551246216175},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1551234617548},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1551234617553},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1551234617549},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1551234617554},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1551234617550},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1551234617572},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1551234617567},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1551234617575},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1551234617555},{"_id":"themes/next/source/lib/clipboard/clipboard-action.js","hash":"8129a822aec2c10d043f423a9350998c8e35eb35","modified":1542255406000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1551234617599},{"_id":"themes/next/source/lib/clipboard/clipboard.js","hash":"58de9e9688c6d4bd796d1eb88b6df3b7eb3d0182","modified":1542255406000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1551234617573},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1551234617574},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1551234617600},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1551234617598},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1551234617601},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1551234617624},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1551234617601},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1551234617625},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1551234617626},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1551234617627},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1551234617626},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1551234617591},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1551234617592},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1551234617629},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1551234617594},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1551234617593},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1551234617621},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1551234617634},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1551234617633},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1551234617635},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1551234617637},{"_id":"themes/next/source/images/avatar.gif","hash":"e741ec01f82f8e836bc7945abbdf1d69f7505882","modified":1551248108989},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1551234617638},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1551234617641},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1551234617639},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1551234617636},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1551234617640},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1551234617644},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1551234617646},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1551234617642},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1551234617647},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1551234617632},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1551234617630},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1551234617631},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1551234617645},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1551234617648},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1551234617649},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1551234617658},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1551234617650},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1551234617659},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1551234617663},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1551234617662},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1551234617664},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1551234617551},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1551234617623},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1551234617395},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1551234617501},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1551234617393},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1551234617502},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1551234617504},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1551234617503},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1551234617505},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1551234617505},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1551234617506},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1551234617500},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1551234617488},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1551234617490},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1551234617490},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1551234617492},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1551246823992},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1551234617491},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ed628857333e20a3e2e784531bbd57aa09857f9c","modified":1551249242374},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1551234617493},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1551234617519},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1551234617518},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1551234617511},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1551234617519},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1551234617513},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1551234617521},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1551234617510},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1551234617427},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1551234617512},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1551234617430},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1551234617431},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1551234617514},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1551234617428},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1551234617429},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1551234617468},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1551234617445},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1551234617553},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1551234617487},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1551234617562},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1551234617577},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1551234617578},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1551234617579},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1551234617565},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1551234617580},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1551234617580},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1551234617581},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1551234617588},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1551234617589},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1551234617590},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1551234617603},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1551234617605},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1551234617595},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1551234617596},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1551234617656},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1551234617657},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1551234617566},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551234617620},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1551234617661},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1551234617604},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1551234617433},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1551234617509},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1551234617508},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1551234617432},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1551234617434},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1551234617435},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1551234617436},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1551234617440},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1551234617442},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1551234617515},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1551234617438},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1551234617436},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1551234617438},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1551234617444},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1551234617441},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1551234617439},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"6543b27fdbde7dacaef2bb50f06b5754728de7e8","modified":1551247425425},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1551234617443},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"2d3682e711f6d625507af8b209ec3a913a955443","modified":1551236300160},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1551234617448},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"718b775b7853d849e84dc4b3faf19847506d3f76","modified":1551236109015},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1551234617447},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1551234617451},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"c1eb69b5621b20787f4cd85e22c91e03b45ba3f5","modified":1551246709767},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1551234617451},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1551234617450},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1551234617454},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1551234617456},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1551234617455},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1551234617457},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1551234617456},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1551234617452},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"aedca34037e682b539a57c46529a4b87d882e00f","modified":1551410693635},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1551234617459},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"71cd850b3ac065629b5fd77d315e1681ee5e575d","modified":1551235431647},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1551234617464},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1551234617461},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1551234617465},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1551234617463},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1551234617467},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1551234617462},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1551234617466},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1551234617466},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1551234617471},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1551234617473},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1551234617472},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1551234617470},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1551234617469},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1551234617475},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1551234617476},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1551234617479},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1551234617477},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1551234617478},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1551234617480},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1551234617482},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1551234617474},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1551234617483},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1551234617483},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1551234617481},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1551234617485},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1551234617486},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1551234617484},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1551234617558},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1551234617558},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1551234617561},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1551234617559},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1551234617585},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1551234617583},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1551234617584},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551234617619},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1551234617586},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1551234617584},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1551234617608},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1551234617564},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1551234617587},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1551234617560},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1551234617617},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551234617610},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1551234617571},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1551234617654},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1551234617615},{"_id":"public/baidu_urls.txt","hash":"eae39be21d94ae838aad7f06c1132123851cf378","modified":1552039772275},{"_id":"public/atom.xml","hash":"cc2b33711f60051717e28e58b96f5759136e2c78","modified":1552039937635},{"_id":"public/search.xml","hash":"19f02125db97436c2085038dbbc8cb986c0a4fcc","modified":1552039772283},{"_id":"public/baidusitemap.xml","hash":"df719b45799bf0b86c7b1ccfa58724608deeb596","modified":1552039772283},{"_id":"public/sitemap.xml","hash":"e365433daaccf4c168f3f7a722354ecdf5c29350","modified":1552039937635},{"_id":"public/404.html","hash":"7587e5707640b042b2b871bd8b109872cd9698dd","modified":1552039772456},{"_id":"public/tags/index.html","hash":"5f0d499f39cfbff32487e2f0dbff10c07117ace5","modified":1552039772456},{"_id":"public/2019/03/04/Redis相关/index.html","hash":"a5b02b7b79282f6c2c2431e4840e64baec557a95","modified":1552039772458},{"_id":"public/catalogue/index.html","hash":"25f0193c12831900ea3dc1767af8e52f2602e799","modified":1552039772459},{"_id":"public/about/index.html","hash":"3874efb92ce02cdd372b79257a59aa6e314164e3","modified":1552039772459},{"_id":"public/2019/02/28/HttpClient工具类/index.html","hash":"82689e334e2c22f0ffb6596c29ec43393775ed3d","modified":1552039772459},{"_id":"public/2019/02/27/git常用命令/index.html","hash":"8da4288942c6a75b4e2ef8f1c2afd09c25e2a6ec","modified":1552039772459},{"_id":"public/archives/index.html","hash":"33e99f3d9d298b8e21d80f86cd2aba886606ae6f","modified":1552039772459},{"_id":"public/2019/02/28/JS跨域请求/index.html","hash":"44a6b18c249a98f8e700675fc7bd48fc9cc59376","modified":1552039772459},{"_id":"public/archives/2019/index.html","hash":"1b26f0dfac25219fc69f91a7c88a1b64e3fef1e9","modified":1552039772459},{"_id":"public/categories/IT技术/index.html","hash":"9d6fb9a15622fa32b581bcbb99c82d3d37d1cc77","modified":1552039772459},{"_id":"public/index.html","hash":"e993dd819121947d950aa955e471408e85a4fc58","modified":1552039937651},{"_id":"public/categories/index.html","hash":"f4b965be5d6831dd1973e9f0a70c62493fe062bc","modified":1552039772459},{"_id":"public/archives/2019/02/index.html","hash":"582b998435f937c0fe04d0a2287fd7b2f40e515b","modified":1552039772459},{"_id":"public/archives/2019/03/index.html","hash":"475e2c2a5d9e109de2e5f47580550116fdc41f2a","modified":1552039772459},{"_id":"public/tags/javascript/index.html","hash":"ad4447af1308ff1f5f798bf158405db6b080b44b","modified":1552039772459},{"_id":"public/tags/Java/index.html","hash":"0ee68bcd11979f4503b614ad0ec18c891f7424dd","modified":1552039772460},{"_id":"public/tags/跨域/index.html","hash":"7208bcbd14738894b49ad47b8e87f8de6dbc7374","modified":1552039772460},{"_id":"public/tags/git/index.html","hash":"fefc523db7b6a1608e06dfb0daa7488e2b99176b","modified":1552039772460},{"_id":"public/tags/redis/index.html","hash":"ef95ec43e72a017989cb116fc2543164af14898c","modified":1552039772460},{"_id":"public/tags/Key-Value数据库/index.html","hash":"197c7bbfb5ec111576506d40de7375a01e7dd6d2","modified":1552039772460},{"_id":"public/tags/JS/index.html","hash":"f29853948b82db31c3b968dc15860943a4b368ff","modified":1552039772460},{"_id":"public/tags/HttpClient/index.html","hash":"3dfd1bce6322d28d0a25b5fb80c189801cfe31d1","modified":1552039772460},{"_id":"public/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552039772460},{"_id":"public/2019/03/04/HashMap源码篇/index.html","hash":"660479f0bffb8523dc50d81cb24665d6c6835f74","modified":1552039937651},{"_id":"public/categories/源码解读/index.html","hash":"770730e2d033f7d1a1574cc615fb485110460648","modified":1552039772479},{"_id":"public/tags/HashMap/index.html","hash":"5efcc4ea9d542eb02663b9909187e2df9337bcc6","modified":1552039772479},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1552039772479},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1552039772479},{"_id":"public/images/bg.jpg","hash":"665b70af88d6ea6f1690fb82c447ca01d3d83a57","modified":1552039772479},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1552039772479},{"_id":"public/images/bg2.jpg","hash":"7f5a99eca0048cbb68dcdc9ad1b28acb45d7ee97","modified":1552039772479},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1552039772479},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1552039772479},{"_id":"public/images/bg3.jpg","hash":"a0764af3de7a384a07322cd7745355042556df62","modified":1552039772479},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1552039772480},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1552039772480},{"_id":"public/images/avatar_bak.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1552039772480},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1552039772480},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552039772480},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1552039772480},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1552039772480},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1552039772480},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1552039772480},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1552039772480},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1552039772480},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1552039772480},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1552039772480},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1552039772480},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1552039772480},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1552039772480},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1552039772480},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1552039772480},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1552039772480},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1552039772480},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1552039772480},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1552039772480},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1552039772480},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1552039772480},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1552039772480},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1552039772481},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1552039772481},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1552039772481},{"_id":"public/2019/03/04/Redis相关/1481291-20180925141429889-1694430603.png","hash":"0d337f905600e4fa6b993f84ce8e29a08e85a8b4","modified":1552039774700},{"_id":"public/2019/03/04/Redis相关/1481291-20180925142100480-1152515615.png","hash":"5fd91656c50d636a9c53260b928ea67248c553ca","modified":1552039774705},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1552039774706},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1552039774707},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1552039774710},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1552039774711},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1552039774711},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1552039774711},{"_id":"public/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1552039774711},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1552039774711},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1552039774711},{"_id":"public/js/src/custom.js","hash":"90b139a071ae7af9b71d8cd9c34929d8f4349a7b","modified":1552039774711},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1552039774711},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1552039774711},{"_id":"public/lib/clipboard/clipboard-action.js","hash":"8129a822aec2c10d043f423a9350998c8e35eb35","modified":1552039774711},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1552039774711},{"_id":"public/lib/clipboard/clipboard.js","hash":"58de9e9688c6d4bd796d1eb88b6df3b7eb3d0182","modified":1552039774711},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1552039774711},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1552039774711},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1552039774711},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1552039774711},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1552039774711},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1552039774711},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1552039774712},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1552039774712},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1552039774712},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1552039774712},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1552039774712},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1552039774712},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1552039774712},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1552039774712},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1552039774712},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1552039774712},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1552039774712},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1552039774712},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1552039774712},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1552039774712},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1552039774712},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1552039774712},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1552039774712},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1552039774712},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1552039774712},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1552039774712},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1552039774713},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1552039774713},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1552039774713},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1552039774713},{"_id":"public/css/main.css","hash":"7b03f53a226aecbc791a089e31c190d7e73804b3","modified":1552039774713},{"_id":"public/2019/03/04/Redis相关/1481291-20180925142304757-1498788186.png","hash":"0b7e56e16cebf4a6f03f5b91167dbcd66f68ccef","modified":1552039774734},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1552039774734},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1552039774735},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1552039774737},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1552039774737},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1552039774737},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1552039774737},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1552039774737},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1552039774737},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1552039774737},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1552039774737},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1552039774737},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1552039774738},{"_id":"public/2019/03/04/Redis相关/1481291-20180925141527592-2105439510.png","hash":"77d8b102569e50fb7f63eae97fa063d0e0ef44d3","modified":1552039774747},{"_id":"public/2019/03/04/Redis相关/1481291-20180925142143478-1454265814.png","hash":"81e74d7db7ee040fa1cfe660e2b875fe23b94db4","modified":1552039774748},{"_id":"public/images/avatar.gif","hash":"e741ec01f82f8e836bc7945abbdf1d69f7505882","modified":1552039774748},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1552039774749},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1552039774753},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1552039774753},{"_id":"public/2019/03/04/Redis相关/1481291-20180925142118041-1727225479.png","hash":"f43148ebe8aba706998a5aabc4a2aee6065e2c37","modified":1552039775010},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1552039775035},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1552039775035},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1552039775255},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1552039775255},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1552039775255},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1552039775255},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1552039775255},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1552039775255},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1552039775255},{"_id":"public/2019/03/04/Redis相关/1481291-20180925142206124-913246424.png","hash":"b3b49f1b2155031a438f9d13a8f6cf99fabc10ae","modified":1552039775327},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1552039775361},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1552039775361},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1552039775423},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1552039775423},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1552039775501},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1552039775506},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1552039775506},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1552039775538},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1552039775551},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1552039775564}],"Category":[{"name":"IT技术","_id":"cjszwekh200055okb1ugc5n41"},{"name":"源码解读","_id":"cjszwekxw000y5okbrcii1zhb"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2019-02-27T04:37:44.411Z","updated":"2019-02-27T04:37:44.411Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjszwejq300005okbxsz4tren","content":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"","date":"2019-02-27T04:33:53.000Z","comments":0,"_content":"","source":"404/index.md","raw":"---\ntitle: #404 Not Found：该页无法显示\ndate: 2019-02-27 12:33:53\ncomments: false\npermalink: /404\n---\n","updated":"2019-02-27T04:34:47.248Z","path":"/404.html","layout":"page","_id":"cjszwekgs00015okb55264i24","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2019-02-27T04:54:55.000Z","type":"about","_content":"#### 热爱技术","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-02-27 12:54:55\ntype: \"about\"\n---\n#### 热爱技术","updated":"2019-03-01T02:58:47.730Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjszwekgy00035okbm69vf1d3","content":"<h4 id=\"热爱技术\"><a href=\"#热爱技术\" class=\"headerlink\" title=\"热爱技术\"></a>热爱技术</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"热爱技术\"><a href=\"#热爱技术\" class=\"headerlink\" title=\"热爱技术\"></a>热爱技术</h4>"},{"title":"目录","date":"2019-02-28T06:42:34.000Z","type":"catalogue","_content":"","source":"catalogue/index.md","raw":"---\ntitle: 目录\ndate: 2019-02-28 14:42:34\ntype: \"catalogue\"\n---\n","updated":"2019-03-01T03:03:07.234Z","path":"catalogue/index.html","comments":1,"layout":"page","_id":"cjszwekh400075okbn8x1y2e4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2019-02-27T02:39:50.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-02-27 10:39:50\ntype: \"categories\"\n---\n","updated":"2019-03-01T03:15:26.030Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjszwekh700095okb6et2g9r9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-02-27T04:53:36.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-02-27 12:53:36\ntype: \"tags\"\n---\n","updated":"2019-02-27T04:56:24.183Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjszwekh9000a5okbqfsovdiq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"HttpClient工具类","date":"2019-02-28T04:52:46.000Z","catalogue":"Java web","_content":"引用自> https://my.oschina.net/u/873047/blog/204634\n所需jar包：\n* commons-cdec-1.9.jar\n* commons-logging-1.2.jar\n* fluent-hc-4.5.2.jar\n* httpclient-4.5.2.jar\n* httpclient-cache-4.5.2.jar\n* httpclient-win-4.5.2.jar\n* httpcore-4.4.4.jar\n* httpmime-4.5.2.jar\n* jna-4.1.0.jar\n* jna-platform-4.1.0.jar\n<!--more-->\n\n代码如下：\n```\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\n\npublic class HttpRequestUtils {\n\t\n\tprivate static final CloseableHttpClient httpClient;\n    public static final String CHARSET = \"UTF-8\";\n\n    static {\n        RequestConfig config = RequestConfig.custom().setConnectTimeout(60000).setSocketTimeout(15000).build();\n        httpClient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n    }\n\n    public static String doGet(String url, Map<String, String> params){\n        return doGet(url, params,CHARSET);\n    }\n    public static String doPost(String url, Map<String, String> params){\n        return doPost(url, params,CHARSET);\n    }\n    /**\n     * HTTP Get 获取内容\n     * @param url  请求的url地址 ?之前的地址\n     * @param params\t请求的参数\n     * @param charset\t编码格式\n     * @return\t页面内容\n     */\n    public static String doGet(String url,Map<String,String> params,String charset){\n    \tif(url==null||\"\".equals(url)){\n    \t\treturn null;\n    \t}\n    \ttry {\n    \t\tif(params != null && !params.isEmpty()){\n    \t\t\tList<NameValuePair> pairs = new ArrayList<NameValuePair>(params.size());\n    \t\t\tfor(Map.Entry<String,String> entry : params.entrySet()){\n    \t\t\t\tString value = entry.getValue();\n    \t\t\t\tif(value != null){\n    \t\t\t\t\tpairs.add(new BasicNameValuePair(entry.getKey(),value));\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\turl += \"?\" + EntityUtils.toString(new UrlEncodedFormEntity(pairs, charset));\n    \t\t}\n    \t\tHttpGet httpGet = new HttpGet(url);\n    \t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n    \t\tint statusCode = response.getStatusLine().getStatusCode();\n    \t\tif (statusCode != 200) {\n    \t\t\thttpGet.abort();\n    \t\t\tthrow new RuntimeException(\"HttpClient,error status code :\" + statusCode);\n    \t\t}\n    \t\tHttpEntity entity = response.getEntity();\n    \t\tString result = null;\n    \t\tif (entity != null){\n    \t\t\tresult = EntityUtils.toString(entity, \"utf-8\");\n    \t\t}\n    \t\tEntityUtils.consume(entity);\n    \t\tresponse.close();\n    \t\treturn result;\n    \t} catch (Exception e) {\n    \t\te.printStackTrace();\n    \t}\n    \treturn null;\n    }\n    \n    /**\n     * HTTP Post 获取内容\n     * @param url  请求的url地址 ?之前的地址\n     * @param params\t请求的参数\n     * @param charset\t编码格式\n     * @return\t页面内容\n     */\n    public static String doPost(String url,Map<String,String> params,String charset){\n    \tif(url==null||\"\".equals(url)){\n    \t\treturn null;\n    \t}\n    \ttry {\n    \t\tList<NameValuePair> pairs = null;\n    \t\tif(params != null && !params.isEmpty()){\n    \t\t\tpairs = new ArrayList<NameValuePair>(params.size());\n    \t\t\tfor(Map.Entry<String,String> entry : params.entrySet()){\n    \t\t\t\tString value = entry.getValue();\n    \t\t\t\tif(value != null){\n    \t\t\t\t\tpairs.add(new BasicNameValuePair(entry.getKey(),value));\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\tHttpPost httpPost = new HttpPost(url);\n    \t\tif(pairs != null && pairs.size() > 0){\n    \t\t\thttpPost.setEntity(new UrlEncodedFormEntity(pairs,CHARSET));\n    \t\t}\n    \t\tCloseableHttpResponse response = httpClient.execute(httpPost);\n    \t\tint statusCode = response.getStatusLine().getStatusCode();\n    \t\tif (statusCode != 200) {\n    \t\t\thttpPost.abort();\n    \t\t\tthrow new RuntimeException(\"HttpClient,error status code :\" + statusCode);\n    \t\t}\n    \t\tHttpEntity entity = response.getEntity();\n    \t\tString result = null;\n    \t\tif (entity != null){\n    \t\t\tresult = EntityUtils.toString(entity, \"utf-8\");\n    \t\t}\n    \t\tEntityUtils.consume(entity);\n    \t\tresponse.close();\n    \t\treturn result;\n    \t} catch (Exception e) {\n    \t\te.printStackTrace();\n    \t}\n    \treturn null;\n    }\n    public static void main(String []args){\n    \tString getData = doGet(\"http://www.baidu.com/\",null);\n    \tSystem.out.println(getData);\n    \tSystem.out.println(\"----------------------分割线-----------------------\");\n    \tString postData = doPost(\"http://www.baidu.com/\",null);\n    \tSystem.out.println(postData);\n    }\n}\n```\n","source":"_posts/HttpClient工具类.md","raw":"---\ntitle: HttpClient工具类\ndate: 2019-02-28 12:52:46\ncategories: IT技术\ncatalogue: Java web\ntags: [Java,HttpClient]\n---\n引用自> https://my.oschina.net/u/873047/blog/204634\n所需jar包：\n* commons-cdec-1.9.jar\n* commons-logging-1.2.jar\n* fluent-hc-4.5.2.jar\n* httpclient-4.5.2.jar\n* httpclient-cache-4.5.2.jar\n* httpclient-win-4.5.2.jar\n* httpcore-4.4.4.jar\n* httpmime-4.5.2.jar\n* jna-4.1.0.jar\n* jna-platform-4.1.0.jar\n<!--more-->\n\n代码如下：\n```\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\n\npublic class HttpRequestUtils {\n\t\n\tprivate static final CloseableHttpClient httpClient;\n    public static final String CHARSET = \"UTF-8\";\n\n    static {\n        RequestConfig config = RequestConfig.custom().setConnectTimeout(60000).setSocketTimeout(15000).build();\n        httpClient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n    }\n\n    public static String doGet(String url, Map<String, String> params){\n        return doGet(url, params,CHARSET);\n    }\n    public static String doPost(String url, Map<String, String> params){\n        return doPost(url, params,CHARSET);\n    }\n    /**\n     * HTTP Get 获取内容\n     * @param url  请求的url地址 ?之前的地址\n     * @param params\t请求的参数\n     * @param charset\t编码格式\n     * @return\t页面内容\n     */\n    public static String doGet(String url,Map<String,String> params,String charset){\n    \tif(url==null||\"\".equals(url)){\n    \t\treturn null;\n    \t}\n    \ttry {\n    \t\tif(params != null && !params.isEmpty()){\n    \t\t\tList<NameValuePair> pairs = new ArrayList<NameValuePair>(params.size());\n    \t\t\tfor(Map.Entry<String,String> entry : params.entrySet()){\n    \t\t\t\tString value = entry.getValue();\n    \t\t\t\tif(value != null){\n    \t\t\t\t\tpairs.add(new BasicNameValuePair(entry.getKey(),value));\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\turl += \"?\" + EntityUtils.toString(new UrlEncodedFormEntity(pairs, charset));\n    \t\t}\n    \t\tHttpGet httpGet = new HttpGet(url);\n    \t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n    \t\tint statusCode = response.getStatusLine().getStatusCode();\n    \t\tif (statusCode != 200) {\n    \t\t\thttpGet.abort();\n    \t\t\tthrow new RuntimeException(\"HttpClient,error status code :\" + statusCode);\n    \t\t}\n    \t\tHttpEntity entity = response.getEntity();\n    \t\tString result = null;\n    \t\tif (entity != null){\n    \t\t\tresult = EntityUtils.toString(entity, \"utf-8\");\n    \t\t}\n    \t\tEntityUtils.consume(entity);\n    \t\tresponse.close();\n    \t\treturn result;\n    \t} catch (Exception e) {\n    \t\te.printStackTrace();\n    \t}\n    \treturn null;\n    }\n    \n    /**\n     * HTTP Post 获取内容\n     * @param url  请求的url地址 ?之前的地址\n     * @param params\t请求的参数\n     * @param charset\t编码格式\n     * @return\t页面内容\n     */\n    public static String doPost(String url,Map<String,String> params,String charset){\n    \tif(url==null||\"\".equals(url)){\n    \t\treturn null;\n    \t}\n    \ttry {\n    \t\tList<NameValuePair> pairs = null;\n    \t\tif(params != null && !params.isEmpty()){\n    \t\t\tpairs = new ArrayList<NameValuePair>(params.size());\n    \t\t\tfor(Map.Entry<String,String> entry : params.entrySet()){\n    \t\t\t\tString value = entry.getValue();\n    \t\t\t\tif(value != null){\n    \t\t\t\t\tpairs.add(new BasicNameValuePair(entry.getKey(),value));\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\tHttpPost httpPost = new HttpPost(url);\n    \t\tif(pairs != null && pairs.size() > 0){\n    \t\t\thttpPost.setEntity(new UrlEncodedFormEntity(pairs,CHARSET));\n    \t\t}\n    \t\tCloseableHttpResponse response = httpClient.execute(httpPost);\n    \t\tint statusCode = response.getStatusLine().getStatusCode();\n    \t\tif (statusCode != 200) {\n    \t\t\thttpPost.abort();\n    \t\t\tthrow new RuntimeException(\"HttpClient,error status code :\" + statusCode);\n    \t\t}\n    \t\tHttpEntity entity = response.getEntity();\n    \t\tString result = null;\n    \t\tif (entity != null){\n    \t\t\tresult = EntityUtils.toString(entity, \"utf-8\");\n    \t\t}\n    \t\tEntityUtils.consume(entity);\n    \t\tresponse.close();\n    \t\treturn result;\n    \t} catch (Exception e) {\n    \t\te.printStackTrace();\n    \t}\n    \treturn null;\n    }\n    public static void main(String []args){\n    \tString getData = doGet(\"http://www.baidu.com/\",null);\n    \tSystem.out.println(getData);\n    \tSystem.out.println(\"----------------------分割线-----------------------\");\n    \tString postData = doPost(\"http://www.baidu.com/\",null);\n    \tSystem.out.println(postData);\n    }\n}\n```\n","slug":"HttpClient工具类","published":1,"updated":"2019-03-01T03:42:34.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjszwekgt00025okbvzmfqpli","content":"<p>引用自&gt; <a href=\"https://my.oschina.net/u/873047/blog/204634\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/u/873047/blog/204634</a><br>所需jar包：</p>\n<ul>\n<li>commons-cdec-1.9.jar</li>\n<li>commons-logging-1.2.jar</li>\n<li>fluent-hc-4.5.2.jar</li>\n<li>httpclient-4.5.2.jar</li>\n<li>httpclient-cache-4.5.2.jar</li>\n<li>httpclient-win-4.5.2.jar</li>\n<li>httpcore-4.4.4.jar</li>\n<li>httpmime-4.5.2.jar</li>\n<li>jna-4.1.0.jar</li>\n<li>jna-platform-4.1.0.jar<a id=\"more\"></a>\n</li>\n</ul>\n<p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.http.HttpEntity;</span><br><span class=\"line\">import org.apache.http.NameValuePair;</span><br><span class=\"line\">import org.apache.http.client.config.RequestConfig;</span><br><span class=\"line\">import org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class=\"line\">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\">import org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\">import org.apache.http.client.methods.HttpPost;</span><br><span class=\"line\">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\">import org.apache.http.impl.client.HttpClientBuilder;</span><br><span class=\"line\">import org.apache.http.message.BasicNameValuePair;</span><br><span class=\"line\">import org.apache.http.util.EntityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HttpRequestUtils &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate static final CloseableHttpClient httpClient;</span><br><span class=\"line\">    public static final String CHARSET = &quot;UTF-8&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        RequestConfig config = RequestConfig.custom().setConnectTimeout(60000).setSocketTimeout(15000).build();</span><br><span class=\"line\">        httpClient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static String doGet(String url, Map&lt;String, String&gt; params)&#123;</span><br><span class=\"line\">        return doGet(url, params,CHARSET);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static String doPost(String url, Map&lt;String, String&gt; params)&#123;</span><br><span class=\"line\">        return doPost(url, params,CHARSET);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * HTTP Get 获取内容</span><br><span class=\"line\">     * @param url  请求的url地址 ?之前的地址</span><br><span class=\"line\">     * @param params\t请求的参数</span><br><span class=\"line\">     * @param charset\t编码格式</span><br><span class=\"line\">     * @return\t页面内容</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String doGet(String url,Map&lt;String,String&gt; params,String charset)&#123;</span><br><span class=\"line\">    \tif(url==null||&quot;&quot;.equals(url))&#123;</span><br><span class=\"line\">    \t\treturn null;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \ttry &#123;</span><br><span class=\"line\">    \t\tif(params != null &amp;&amp; !params.isEmpty())&#123;</span><br><span class=\"line\">    \t\t\tList&lt;NameValuePair&gt; pairs = new ArrayList&lt;NameValuePair&gt;(params.size());</span><br><span class=\"line\">    \t\t\tfor(Map.Entry&lt;String,String&gt; entry : params.entrySet())&#123;</span><br><span class=\"line\">    \t\t\t\tString value = entry.getValue();</span><br><span class=\"line\">    \t\t\t\tif(value != null)&#123;</span><br><span class=\"line\">    \t\t\t\t\tpairs.add(new BasicNameValuePair(entry.getKey(),value));</span><br><span class=\"line\">    \t\t\t\t&#125;</span><br><span class=\"line\">    \t\t\t&#125;</span><br><span class=\"line\">    \t\t\turl += &quot;?&quot; + EntityUtils.toString(new UrlEncodedFormEntity(pairs, charset));</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tHttpGet httpGet = new HttpGet(url);</span><br><span class=\"line\">    \t\tCloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class=\"line\">    \t\tint statusCode = response.getStatusLine().getStatusCode();</span><br><span class=\"line\">    \t\tif (statusCode != 200) &#123;</span><br><span class=\"line\">    \t\t\thttpGet.abort();</span><br><span class=\"line\">    \t\t\tthrow new RuntimeException(&quot;HttpClient,error status code :&quot; + statusCode);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\">    \t\tString result = null;</span><br><span class=\"line\">    \t\tif (entity != null)&#123;</span><br><span class=\"line\">    \t\t\tresult = EntityUtils.toString(entity, &quot;utf-8&quot;);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tEntityUtils.consume(entity);</span><br><span class=\"line\">    \t\tresponse.close();</span><br><span class=\"line\">    \t\treturn result;</span><br><span class=\"line\">    \t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">    \t\te.printStackTrace();</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \treturn null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * HTTP Post 获取内容</span><br><span class=\"line\">     * @param url  请求的url地址 ?之前的地址</span><br><span class=\"line\">     * @param params\t请求的参数</span><br><span class=\"line\">     * @param charset\t编码格式</span><br><span class=\"line\">     * @return\t页面内容</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String doPost(String url,Map&lt;String,String&gt; params,String charset)&#123;</span><br><span class=\"line\">    \tif(url==null||&quot;&quot;.equals(url))&#123;</span><br><span class=\"line\">    \t\treturn null;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \ttry &#123;</span><br><span class=\"line\">    \t\tList&lt;NameValuePair&gt; pairs = null;</span><br><span class=\"line\">    \t\tif(params != null &amp;&amp; !params.isEmpty())&#123;</span><br><span class=\"line\">    \t\t\tpairs = new ArrayList&lt;NameValuePair&gt;(params.size());</span><br><span class=\"line\">    \t\t\tfor(Map.Entry&lt;String,String&gt; entry : params.entrySet())&#123;</span><br><span class=\"line\">    \t\t\t\tString value = entry.getValue();</span><br><span class=\"line\">    \t\t\t\tif(value != null)&#123;</span><br><span class=\"line\">    \t\t\t\t\tpairs.add(new BasicNameValuePair(entry.getKey(),value));</span><br><span class=\"line\">    \t\t\t\t&#125;</span><br><span class=\"line\">    \t\t\t&#125;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tHttpPost httpPost = new HttpPost(url);</span><br><span class=\"line\">    \t\tif(pairs != null &amp;&amp; pairs.size() &gt; 0)&#123;</span><br><span class=\"line\">    \t\t\thttpPost.setEntity(new UrlEncodedFormEntity(pairs,CHARSET));</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tCloseableHttpResponse response = httpClient.execute(httpPost);</span><br><span class=\"line\">    \t\tint statusCode = response.getStatusLine().getStatusCode();</span><br><span class=\"line\">    \t\tif (statusCode != 200) &#123;</span><br><span class=\"line\">    \t\t\thttpPost.abort();</span><br><span class=\"line\">    \t\t\tthrow new RuntimeException(&quot;HttpClient,error status code :&quot; + statusCode);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\">    \t\tString result = null;</span><br><span class=\"line\">    \t\tif (entity != null)&#123;</span><br><span class=\"line\">    \t\t\tresult = EntityUtils.toString(entity, &quot;utf-8&quot;);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tEntityUtils.consume(entity);</span><br><span class=\"line\">    \t\tresponse.close();</span><br><span class=\"line\">    \t\treturn result;</span><br><span class=\"line\">    \t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">    \t\te.printStackTrace();</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \treturn null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String []args)&#123;</span><br><span class=\"line\">    \tString getData = doGet(&quot;http://www.baidu.com/&quot;,null);</span><br><span class=\"line\">    \tSystem.out.println(getData);</span><br><span class=\"line\">    \tSystem.out.println(&quot;----------------------分割线-----------------------&quot;);</span><br><span class=\"line\">    \tString postData = doPost(&quot;http://www.baidu.com/&quot;,null);</span><br><span class=\"line\">    \tSystem.out.println(postData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>引用自&gt; <a href=\"https://my.oschina.net/u/873047/blog/204634\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/u/873047/blog/204634</a><br>所需jar包：</p>\n<ul>\n<li>commons-cdec-1.9.jar</li>\n<li>commons-logging-1.2.jar</li>\n<li>fluent-hc-4.5.2.jar</li>\n<li>httpclient-4.5.2.jar</li>\n<li>httpclient-cache-4.5.2.jar</li>\n<li>httpclient-win-4.5.2.jar</li>\n<li>httpcore-4.4.4.jar</li>\n<li>httpmime-4.5.2.jar</li>\n<li>jna-4.1.0.jar</li>\n<li>jna-platform-4.1.0.jar</li></ul>","more":"\n\n<p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.http.HttpEntity;</span><br><span class=\"line\">import org.apache.http.NameValuePair;</span><br><span class=\"line\">import org.apache.http.client.config.RequestConfig;</span><br><span class=\"line\">import org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class=\"line\">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\">import org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\">import org.apache.http.client.methods.HttpPost;</span><br><span class=\"line\">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\">import org.apache.http.impl.client.HttpClientBuilder;</span><br><span class=\"line\">import org.apache.http.message.BasicNameValuePair;</span><br><span class=\"line\">import org.apache.http.util.EntityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HttpRequestUtils &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate static final CloseableHttpClient httpClient;</span><br><span class=\"line\">    public static final String CHARSET = &quot;UTF-8&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        RequestConfig config = RequestConfig.custom().setConnectTimeout(60000).setSocketTimeout(15000).build();</span><br><span class=\"line\">        httpClient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static String doGet(String url, Map&lt;String, String&gt; params)&#123;</span><br><span class=\"line\">        return doGet(url, params,CHARSET);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static String doPost(String url, Map&lt;String, String&gt; params)&#123;</span><br><span class=\"line\">        return doPost(url, params,CHARSET);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * HTTP Get 获取内容</span><br><span class=\"line\">     * @param url  请求的url地址 ?之前的地址</span><br><span class=\"line\">     * @param params\t请求的参数</span><br><span class=\"line\">     * @param charset\t编码格式</span><br><span class=\"line\">     * @return\t页面内容</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String doGet(String url,Map&lt;String,String&gt; params,String charset)&#123;</span><br><span class=\"line\">    \tif(url==null||&quot;&quot;.equals(url))&#123;</span><br><span class=\"line\">    \t\treturn null;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \ttry &#123;</span><br><span class=\"line\">    \t\tif(params != null &amp;&amp; !params.isEmpty())&#123;</span><br><span class=\"line\">    \t\t\tList&lt;NameValuePair&gt; pairs = new ArrayList&lt;NameValuePair&gt;(params.size());</span><br><span class=\"line\">    \t\t\tfor(Map.Entry&lt;String,String&gt; entry : params.entrySet())&#123;</span><br><span class=\"line\">    \t\t\t\tString value = entry.getValue();</span><br><span class=\"line\">    \t\t\t\tif(value != null)&#123;</span><br><span class=\"line\">    \t\t\t\t\tpairs.add(new BasicNameValuePair(entry.getKey(),value));</span><br><span class=\"line\">    \t\t\t\t&#125;</span><br><span class=\"line\">    \t\t\t&#125;</span><br><span class=\"line\">    \t\t\turl += &quot;?&quot; + EntityUtils.toString(new UrlEncodedFormEntity(pairs, charset));</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tHttpGet httpGet = new HttpGet(url);</span><br><span class=\"line\">    \t\tCloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class=\"line\">    \t\tint statusCode = response.getStatusLine().getStatusCode();</span><br><span class=\"line\">    \t\tif (statusCode != 200) &#123;</span><br><span class=\"line\">    \t\t\thttpGet.abort();</span><br><span class=\"line\">    \t\t\tthrow new RuntimeException(&quot;HttpClient,error status code :&quot; + statusCode);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\">    \t\tString result = null;</span><br><span class=\"line\">    \t\tif (entity != null)&#123;</span><br><span class=\"line\">    \t\t\tresult = EntityUtils.toString(entity, &quot;utf-8&quot;);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tEntityUtils.consume(entity);</span><br><span class=\"line\">    \t\tresponse.close();</span><br><span class=\"line\">    \t\treturn result;</span><br><span class=\"line\">    \t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">    \t\te.printStackTrace();</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \treturn null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * HTTP Post 获取内容</span><br><span class=\"line\">     * @param url  请求的url地址 ?之前的地址</span><br><span class=\"line\">     * @param params\t请求的参数</span><br><span class=\"line\">     * @param charset\t编码格式</span><br><span class=\"line\">     * @return\t页面内容</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String doPost(String url,Map&lt;String,String&gt; params,String charset)&#123;</span><br><span class=\"line\">    \tif(url==null||&quot;&quot;.equals(url))&#123;</span><br><span class=\"line\">    \t\treturn null;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \ttry &#123;</span><br><span class=\"line\">    \t\tList&lt;NameValuePair&gt; pairs = null;</span><br><span class=\"line\">    \t\tif(params != null &amp;&amp; !params.isEmpty())&#123;</span><br><span class=\"line\">    \t\t\tpairs = new ArrayList&lt;NameValuePair&gt;(params.size());</span><br><span class=\"line\">    \t\t\tfor(Map.Entry&lt;String,String&gt; entry : params.entrySet())&#123;</span><br><span class=\"line\">    \t\t\t\tString value = entry.getValue();</span><br><span class=\"line\">    \t\t\t\tif(value != null)&#123;</span><br><span class=\"line\">    \t\t\t\t\tpairs.add(new BasicNameValuePair(entry.getKey(),value));</span><br><span class=\"line\">    \t\t\t\t&#125;</span><br><span class=\"line\">    \t\t\t&#125;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tHttpPost httpPost = new HttpPost(url);</span><br><span class=\"line\">    \t\tif(pairs != null &amp;&amp; pairs.size() &gt; 0)&#123;</span><br><span class=\"line\">    \t\t\thttpPost.setEntity(new UrlEncodedFormEntity(pairs,CHARSET));</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tCloseableHttpResponse response = httpClient.execute(httpPost);</span><br><span class=\"line\">    \t\tint statusCode = response.getStatusLine().getStatusCode();</span><br><span class=\"line\">    \t\tif (statusCode != 200) &#123;</span><br><span class=\"line\">    \t\t\thttpPost.abort();</span><br><span class=\"line\">    \t\t\tthrow new RuntimeException(&quot;HttpClient,error status code :&quot; + statusCode);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tHttpEntity entity = response.getEntity();</span><br><span class=\"line\">    \t\tString result = null;</span><br><span class=\"line\">    \t\tif (entity != null)&#123;</span><br><span class=\"line\">    \t\t\tresult = EntityUtils.toString(entity, &quot;utf-8&quot;);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tEntityUtils.consume(entity);</span><br><span class=\"line\">    \t\tresponse.close();</span><br><span class=\"line\">    \t\treturn result;</span><br><span class=\"line\">    \t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">    \t\te.printStackTrace();</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \treturn null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String []args)&#123;</span><br><span class=\"line\">    \tString getData = doGet(&quot;http://www.baidu.com/&quot;,null);</span><br><span class=\"line\">    \tSystem.out.println(getData);</span><br><span class=\"line\">    \tSystem.out.println(&quot;----------------------分割线-----------------------&quot;);</span><br><span class=\"line\">    \tString postData = doPost(&quot;http://www.baidu.com/&quot;,null);</span><br><span class=\"line\">    \tSystem.out.println(postData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"JS跨域请求","date":"2019-02-28T04:52:46.000Z","catalogue":"Java web","_content":"首先js跨域请求是不安全的，可以通过前台调用后台服务器，通过后台httpclient请求url，返回结果。js跨域请求如下：\n前端js：\n```\n\t$.ajax({\n\t\tasync : false,\n\t\turl : url,\n\t\ttype : \"GET\",\n\t\tdataType : \"jsonp\", // 返回的数据类型，设置为JSONP方式\n\t\tjsonp : \"jsonpCallback\",\n\t\tsuccess : function(response) {\n\t\t\talert(\"请求成功\");\n\t\t},\n\t\terror : function() {\n\t\t\talert(\"请求失败\");\n\t\t}\n\t});\n```\n<!--more-->\n后台使用jfinal框架:\n```\nString key = getPara(\"key\");\nString jsonpCallback = getPara(\"jsonpCallback\");\nrenderJson(jsonpCallback+\"(\"+json+\")\");\n```","source":"_posts/JS跨域请求.md","raw":"---\ntitle: JS跨域请求\ndate: 2019-02-28 12:52:46\ncategories: IT技术\ncatalogue: Java web\ntags: [JS,javascript,跨域]\n---\n首先js跨域请求是不安全的，可以通过前台调用后台服务器，通过后台httpclient请求url，返回结果。js跨域请求如下：\n前端js：\n```\n\t$.ajax({\n\t\tasync : false,\n\t\turl : url,\n\t\ttype : \"GET\",\n\t\tdataType : \"jsonp\", // 返回的数据类型，设置为JSONP方式\n\t\tjsonp : \"jsonpCallback\",\n\t\tsuccess : function(response) {\n\t\t\talert(\"请求成功\");\n\t\t},\n\t\terror : function() {\n\t\t\talert(\"请求失败\");\n\t\t}\n\t});\n```\n<!--more-->\n后台使用jfinal框架:\n```\nString key = getPara(\"key\");\nString jsonpCallback = getPara(\"jsonpCallback\");\nrenderJson(jsonpCallback+\"(\"+json+\")\");\n```","slug":"JS跨域请求","published":1,"updated":"2019-03-01T03:35:43.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjszwekgz00045okbcn1m6i70","content":"<p>首先js跨域请求是不安全的，可以通过前台调用后台服务器，通过后台httpclient请求url，返回结果。js跨域请求如下：<br>前端js：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\tasync : false,</span><br><span class=\"line\">\turl : url,</span><br><span class=\"line\">\ttype : &quot;GET&quot;,</span><br><span class=\"line\">\tdataType : &quot;jsonp&quot;, // 返回的数据类型，设置为JSONP方式</span><br><span class=\"line\">\tjsonp : &quot;jsonpCallback&quot;,</span><br><span class=\"line\">\tsuccess : function(response) &#123;</span><br><span class=\"line\">\t\talert(&quot;请求成功&quot;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\terror : function() &#123;</span><br><span class=\"line\">\t\talert(&quot;请求失败&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>后台使用jfinal框架:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String key = getPara(&quot;key&quot;);</span><br><span class=\"line\">String jsonpCallback = getPara(&quot;jsonpCallback&quot;);</span><br><span class=\"line\">renderJson(jsonpCallback+&quot;(&quot;+json+&quot;)&quot;);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>首先js跨域请求是不安全的，可以通过前台调用后台服务器，通过后台httpclient请求url，返回结果。js跨域请求如下：<br>前端js：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\tasync : false,</span><br><span class=\"line\">\turl : url,</span><br><span class=\"line\">\ttype : &quot;GET&quot;,</span><br><span class=\"line\">\tdataType : &quot;jsonp&quot;, // 返回的数据类型，设置为JSONP方式</span><br><span class=\"line\">\tjsonp : &quot;jsonpCallback&quot;,</span><br><span class=\"line\">\tsuccess : function(response) &#123;</span><br><span class=\"line\">\t\talert(&quot;请求成功&quot;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\terror : function() &#123;</span><br><span class=\"line\">\t\talert(&quot;请求失败&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>","more":"<p>后台使用jfinal框架:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String key = getPara(&quot;key&quot;);</span><br><span class=\"line\">String jsonpCallback = getPara(&quot;jsonpCallback&quot;);</span><br><span class=\"line\">renderJson(jsonpCallback+&quot;(&quot;+json+&quot;)&quot;);</span><br></pre></td></tr></table></figure></p>"},{"title":"git常用命令","date":"2019-02-27T04:52:46.000Z","catalogue":"版本管理","_content":"### git常用命令\n1.如何配置你的身份\n```\ngit config --global user.name \"Albert\"\n\ngit config --global user.email \"albert@gmal.com\"\n```\n验证是否配置成功(只需要将最后的名字和邮箱地址去掉即可)\n```\ngit config --global user.name\n\ngit config --global user.email\n```\n<!--more-->\n2.如何创建代码仓库\n\n先进入到项目目录下面,执行命令:\n`git init`\n\n仓库创建完成后,会在项目的根目录下生成一个隐藏的.git文件夹,可以通过ls -al命令来查看一下\n\n3.如何提交本地代码\n\nadd是用于把想要提交的代码先添加进来,而commit则是真正地去执行提交操作,比如我们想要添加AndroidManifest.xml,可以输入一下命令:\n`git add AndroidManifest.xml`\n\n添加目录也是这样,只需将文件名改成目录名即可.\n`git add src`\n\n一次性把所有文件都添加好的命令如下:\n`git add .`\n\n现在项目所有文件已经添加好了,我们来提交一下,输入如下命令:\n`git commit -m \"First commit.\"`\n\n注意-m参数用来加上提交的描述信息.\n\n4.如何把远程版本库克隆到本地\n`git clone https://github.com/albert567/mobilesafe.git`\n\n5.如何将提交的内容同步到远程版本库\n`git push https://github.com/albert567/mobilesafe.git master`\n\n同步时GitHub需要输入用户名和密码来进行身份校验.\n\n注意,如果本地第一次同步远程版本库,需要先将远程版本库clone到本地,然后将.git和README.md拷贝到本地项目根目录,再执行add,commit命令\n\n6.如何把文件从版本控制中删掉\n`git rm res/layout/activity_main.xml`\n\n7.如何查看状态\n`git status`\n\n8.如何查看所有分支\n`git branch -a`\n\n9.如何添加分支\n`git branch test    //如果 test分支不存在,添加该分支`\n\n10.如何切换分支\n`git checkout test  //切换到test分支`\n\n11.如何删除分支\n`git branch -d test   //删除test分支`\n\n12.如何查看提交修改记录\n`git log`","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ndate: 2019-02-27 12:52:46\ncategories: IT技术\ncatalogue: 版本管理\ntags: git\n---\n### git常用命令\n1.如何配置你的身份\n```\ngit config --global user.name \"Albert\"\n\ngit config --global user.email \"albert@gmal.com\"\n```\n验证是否配置成功(只需要将最后的名字和邮箱地址去掉即可)\n```\ngit config --global user.name\n\ngit config --global user.email\n```\n<!--more-->\n2.如何创建代码仓库\n\n先进入到项目目录下面,执行命令:\n`git init`\n\n仓库创建完成后,会在项目的根目录下生成一个隐藏的.git文件夹,可以通过ls -al命令来查看一下\n\n3.如何提交本地代码\n\nadd是用于把想要提交的代码先添加进来,而commit则是真正地去执行提交操作,比如我们想要添加AndroidManifest.xml,可以输入一下命令:\n`git add AndroidManifest.xml`\n\n添加目录也是这样,只需将文件名改成目录名即可.\n`git add src`\n\n一次性把所有文件都添加好的命令如下:\n`git add .`\n\n现在项目所有文件已经添加好了,我们来提交一下,输入如下命令:\n`git commit -m \"First commit.\"`\n\n注意-m参数用来加上提交的描述信息.\n\n4.如何把远程版本库克隆到本地\n`git clone https://github.com/albert567/mobilesafe.git`\n\n5.如何将提交的内容同步到远程版本库\n`git push https://github.com/albert567/mobilesafe.git master`\n\n同步时GitHub需要输入用户名和密码来进行身份校验.\n\n注意,如果本地第一次同步远程版本库,需要先将远程版本库clone到本地,然后将.git和README.md拷贝到本地项目根目录,再执行add,commit命令\n\n6.如何把文件从版本控制中删掉\n`git rm res/layout/activity_main.xml`\n\n7.如何查看状态\n`git status`\n\n8.如何查看所有分支\n`git branch -a`\n\n9.如何添加分支\n`git branch test    //如果 test分支不存在,添加该分支`\n\n10.如何切换分支\n`git checkout test  //切换到test分支`\n\n11.如何删除分支\n`git branch -d test   //删除test分支`\n\n12.如何查看提交修改记录\n`git log`","slug":"git常用命令","published":1,"updated":"2019-03-01T03:17:12.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjszwekh500085okbs2wx6tch","content":"<h3 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h3><p>1.如何配置你的身份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Albert&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email &quot;albert@gmal.com&quot;</span><br></pre></td></tr></table></figure></p>\n<p>验证是否配置成功(只需要将最后的名字和邮箱地址去掉即可)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.如何创建代码仓库</p>\n<p>先进入到项目目录下面,执行命令:<br><code>git init</code></p>\n<p>仓库创建完成后,会在项目的根目录下生成一个隐藏的.git文件夹,可以通过ls -al命令来查看一下</p>\n<p>3.如何提交本地代码</p>\n<p>add是用于把想要提交的代码先添加进来,而commit则是真正地去执行提交操作,比如我们想要添加AndroidManifest.xml,可以输入一下命令:<br><code>git add AndroidManifest.xml</code></p>\n<p>添加目录也是这样,只需将文件名改成目录名即可.<br><code>git add src</code></p>\n<p>一次性把所有文件都添加好的命令如下:<br><code>git add .</code></p>\n<p>现在项目所有文件已经添加好了,我们来提交一下,输入如下命令:<br><code>git commit -m &quot;First commit.&quot;</code></p>\n<p>注意-m参数用来加上提交的描述信息.</p>\n<p>4.如何把远程版本库克隆到本地<br><code>git clone https://github.com/albert567/mobilesafe.git</code></p>\n<p>5.如何将提交的内容同步到远程版本库<br><code>git push https://github.com/albert567/mobilesafe.git master</code></p>\n<p>同步时GitHub需要输入用户名和密码来进行身份校验.</p>\n<p>注意,如果本地第一次同步远程版本库,需要先将远程版本库clone到本地,然后将.git和README.md拷贝到本地项目根目录,再执行add,commit命令</p>\n<p>6.如何把文件从版本控制中删掉<br><code>git rm res/layout/activity_main.xml</code></p>\n<p>7.如何查看状态<br><code>git status</code></p>\n<p>8.如何查看所有分支<br><code>git branch -a</code></p>\n<p>9.如何添加分支<br><code>git branch test    //如果 test分支不存在,添加该分支</code></p>\n<p>10.如何切换分支<br><code>git checkout test  //切换到test分支</code></p>\n<p>11.如何删除分支<br><code>git branch -d test   //删除test分支</code></p>\n<p>12.如何查看提交修改记录<br><code>git log</code></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h3><p>1.如何配置你的身份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Albert&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email &quot;albert@gmal.com&quot;</span><br></pre></td></tr></table></figure></p>\n<p>验证是否配置成功(只需要将最后的名字和邮箱地址去掉即可)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email</span><br></pre></td></tr></table></figure></p>","more":"<p>2.如何创建代码仓库</p>\n<p>先进入到项目目录下面,执行命令:<br><code>git init</code></p>\n<p>仓库创建完成后,会在项目的根目录下生成一个隐藏的.git文件夹,可以通过ls -al命令来查看一下</p>\n<p>3.如何提交本地代码</p>\n<p>add是用于把想要提交的代码先添加进来,而commit则是真正地去执行提交操作,比如我们想要添加AndroidManifest.xml,可以输入一下命令:<br><code>git add AndroidManifest.xml</code></p>\n<p>添加目录也是这样,只需将文件名改成目录名即可.<br><code>git add src</code></p>\n<p>一次性把所有文件都添加好的命令如下:<br><code>git add .</code></p>\n<p>现在项目所有文件已经添加好了,我们来提交一下,输入如下命令:<br><code>git commit -m &quot;First commit.&quot;</code></p>\n<p>注意-m参数用来加上提交的描述信息.</p>\n<p>4.如何把远程版本库克隆到本地<br><code>git clone https://github.com/albert567/mobilesafe.git</code></p>\n<p>5.如何将提交的内容同步到远程版本库<br><code>git push https://github.com/albert567/mobilesafe.git master</code></p>\n<p>同步时GitHub需要输入用户名和密码来进行身份校验.</p>\n<p>注意,如果本地第一次同步远程版本库,需要先将远程版本库clone到本地,然后将.git和README.md拷贝到本地项目根目录,再执行add,commit命令</p>\n<p>6.如何把文件从版本控制中删掉<br><code>git rm res/layout/activity_main.xml</code></p>\n<p>7.如何查看状态<br><code>git status</code></p>\n<p>8.如何查看所有分支<br><code>git branch -a</code></p>\n<p>9.如何添加分支<br><code>git branch test    //如果 test分支不存在,添加该分支</code></p>\n<p>10.如何切换分支<br><code>git checkout test  //切换到test分支</code></p>\n<p>11.如何删除分支<br><code>git branch -d test   //删除test分支</code></p>\n<p>12.如何查看提交修改记录<br><code>git log</code></p>"},{"title":"Redis相关","date":"2019-03-04T04:52:46.000Z","catalogue":"缓存","_content":"介绍：Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API的非关系型数据库。\n传统数据库遵循 ACID 规则。而 Nosql（Not Only SQL 的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称） 一般为分布式而分布式一般遵循 CAP 定理。\nGithub 源码：<https://github.com/antirez/redis>\nRedis 官网：<https://redis.io/>\n\n##### Redis支持的数据类型？\nString字符串\n格式: set key value\nstring类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。\nstring类型是Redis最基本的数据类型，一个键最大能存储512MB。\n\nHash（哈希）\n格式: hmset name  key1 value1 key2 value2\nRedis hash 是一个键值(key=>value)对集合。\nRedis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。\n<!--more-->\n\nList（列表）\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）\n格式: lpush  name  value\n在 key 对应 list 的头部添加字符串元素\n格式: rpush  name  value\n在 key 对应 list 的尾部添加字符串元素\n格式: lrem name  index\nkey 对应 list 中删除 count 个和 value 相同的元素\n格式: llen name  \n返回 key 对应 list 的长度\n\nSet（集合）\n格式: sadd  name  value\nRedis的Set是string类型的无序集合。\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。\n\nzset(sorted set：有序集合)\n格式: zadd  name score value\nRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\nzset的成员是唯一的,但分数(score)却可以重复。\n\n##### 什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\n持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。\nRedis 提供了两种持久化方式:RDB（默认） 和AOF \nRDB：rdb是Redis DataBase缩写\n功能核心函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）两个函数\n{% asset_img 1481291-20180925141429889-1694430603.png%}\nAOF:\nAof是Append-only file缩写\n![avatar](images/1481291-20180925141527592-2105439510.png)\n每当执行服务器(定时)任务或者函数时flushAppendOnlyFile 函数都会被调用， 这个函数执行以下两个工作\naof写入保存：\nWRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件\nSAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中。\n存储结构:\n  内容是redis通讯协议(RESP )格式的命令文本存储。\n\n比较：\n1、aof文件比rdb更新频率高，优先使用aof还原数据。\n2、aof比rdb更安全也更大\n3、rdb性能比aof好\n4、如果两个都配了优先加载AOF\n\n##### 刚刚上面你有提到redis通讯协议(RESP )，能解释下什么是RESP？有什么特点？（可以看到很多面试其实都是连环炮，面试官其实在等着你回答到这个点，如果你答上了对你的评价就又加了一分）\nRESP 是redis客户端和服务端之前使用的一种通讯协议；\nRESP 的特点：实现简单、快速解析、可读性好\nFor Simple Strings the first byte of the reply is \"+\" 回复\nFor Errors the first byte of the reply is \"-\" 错误\nFor Integers the first byte of the reply is \":\" 整数\nFor Bulk Strings the first byte of the reply is \"$\" 字符串\nFor Arrays the first byte of the reply is \"*\" 数组\n\n##### Redis 有哪些架构模式？讲讲各自的特点\n单机版\n ![avatar](images/1481291-20180925142100480-1152515615.png)\n特点：简单\n问题：\n1、内存容量有限 2、处理能力有限 3、无法高可用。\n主从复制\n![avatar](images/1481291-20180925142118041-1727225479.png)\nRedis 的复制（replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。 只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据，主服务器就会一直将发生在自己身上的数据更新同步 给从服务器，从而一直保证主从服务器的数据相同。\n特点：\n1、master/slave 角色\n2、master/slave 数据相同\n3、降低 master 读压力在转交从库\n问题：\n无法保证高可用\n没有解决 master 写的压力\n\n哨兵\n![avatar](images/1481291-20180925142143478-1454265814.png)\nRedis sentinel 是一个分布式系统中监控 redis 主从服务器，并在主服务器下线时自动进行故障转移。其中三个特性：\n监控（Monitoring）：    Sentinel  会不断地检查你的主服务器和从服务器是否运作正常。\n提醒（Notification）： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。\n自动故障迁移（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作。\n特点：\n1、保证高可用\n2、监控各个节点\n3、自动故障迁移\n缺点：主从模式，切换需要时间丢数据\n没有解决 master 写的压力\n\n集群（proxy 型）：\n![avatar](images/1481291-20180925142206124-913246424.png)\nTwemproxy 是一个 Twitter 开源的一个 redis 和 memcache 快速/轻量级代理服务器； Twemproxy 是一个快速的单线程代理程序，支持 Memcached ASCII 协议和 redis 协议。\n特点：\n1、多种 hash 算法：MD5、CRC16、CRC32、CRC32a、hsieh、murmur、Jenkins \n2、支持失败节点自动删除\n3、后端 Sharding 分片逻辑对业务透明，业务方的读写方式和操作单个 Redis 一致\n缺点：增加了新的 proxy，需要维护其高可用。\nfailover 逻辑需要自己实现，其本身不能支持故障的自动转移可扩展性差，进行扩缩容都需要手动干预\n\n集群（直连型）：\n![avatar](images/1481291-20180925142304757-1498788186.png)\n从redis 3.0之后版本支持redis-cluster集群，Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。\n\n特点：\n1、无中心架构（不存在哪个节点影响性能瓶颈），少了 proxy 层。\n2、数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布。\n3、可扩展性，可线性扩展到 1000 个节点，节点可动态添加或删除。\n4、高可用性，部分节点不可用时，集群仍可用。通过增加 Slave 做备份数据副本\n5、实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave到 Master 的角色提升。\n缺点：\n1、资源隔离性较差，容易出现相互影响的情况。\n2、数据通过异步复制,不保证数据的强一致性\n\n##### 什么是一致性哈希算法？什么是哈希槽？\n这两个问题篇幅过长 网上找了两个解锁的不错的文章\nhttps://www.cnblogs.com/lpfuture/p/5796398.html\nhttps://blog.csdn.net/z15732621582/article/details/79121213\n\n\n##### Redis常用命令？\nKeys pattern\n*表示区配所有\n以bit开头的\n查看Exists  key是否存在\nSet\n设置 key 对应的值为 string 类型的 value。\nsetnx\n设置 key 对应的值为 string 类型的 value。如果 key 已经存在，返回 0，nx 是 not exist 的意思。\n删除某个key\n第一次返回1 删除了 第二次返回0\nExpire 设置过期时间（单位秒）\nTTL查看剩下多少时间\n返回负数则key失效，key不存在了\nSetex\n设置 key 对应的值为 string 类型的 value，并指定此键值对应的有效期。\nMset\n一次设置多个 key 的值，成功返回 ok 表示所有的值都设置了，失败返回 0 表示没有任何值被设置。\nGetset\n设置 key 的值，并返回 key 的旧值。\nMget\n一次获取多个 key 的值，如果对应 key 不存在，则对应返回 nil。\nIncr\n对 key 的值做加加操作,并返回新的值。注意 incr 一个不是 int 的 value 会返回错误，incr 一个不存在的 key，则设置 key 为 1\nincrby\n同 incr 类似，加指定值 ，key 不存在时候会设置 key，并认为原来的 value 是 0\nDecr\n对 key 的值做的是减减操作，decr 一个不存在 key，则设置 key 为-1\nDecrby\n同 decr，减指定值。\nAppend\n给指定 key 的字符串值追加 value,返回新字符串值的长度。\nStrlen\n取指定 key 的 value 值的长度。\npersist xxx(取消过期时间)\n选择数据库（0-15库）\nSelect 0 //选择数据库\nmove age 1//把age 移动到1库\nRandomkey随机返回一个key\nRename重命名\nType 返回数据类型\n\n##### 使用过Redis分布式锁么，它是怎么实现的？\n\n先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。\n如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？\nset指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！\n\n##### 使用过Redis做异步队列么，你是怎么用的？有什么缺点？\n\n一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。\n缺点：\n在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。\n能不能生产一次消费多次呢？\n使用pub/sub主题订阅者模式，可以实现1:N的消息队列。\n\n##### 什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？\n缓存穿透\n一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value，就应该去后端系统查找（比如DB）。一些恶意的请求会故意查询不存在的key,请求量很大，就会对后端系统造成很大的压力。这就叫做缓存穿透。\n如何避免？\n1：对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert了之后清理缓存。\n2：对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该bitmap过滤。\n\n缓存雪崩\n当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大压力。导致系统崩溃。\n如何避免？\n1：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。\n2：做二级缓存，A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为短期，A2设置为长期\n3：不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。","source":"_posts/Redis相关.md","raw":"---\ntitle: Redis相关\ndate: 2019-03-04 12:52:46\ncategories: IT技术\ncatalogue: 缓存\ntags: [redis,Key-Value数据库]\n---\n介绍：Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API的非关系型数据库。\n传统数据库遵循 ACID 规则。而 Nosql（Not Only SQL 的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称） 一般为分布式而分布式一般遵循 CAP 定理。\nGithub 源码：<https://github.com/antirez/redis>\nRedis 官网：<https://redis.io/>\n\n##### Redis支持的数据类型？\nString字符串\n格式: set key value\nstring类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。\nstring类型是Redis最基本的数据类型，一个键最大能存储512MB。\n\nHash（哈希）\n格式: hmset name  key1 value1 key2 value2\nRedis hash 是一个键值(key=>value)对集合。\nRedis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。\n<!--more-->\n\nList（列表）\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）\n格式: lpush  name  value\n在 key 对应 list 的头部添加字符串元素\n格式: rpush  name  value\n在 key 对应 list 的尾部添加字符串元素\n格式: lrem name  index\nkey 对应 list 中删除 count 个和 value 相同的元素\n格式: llen name  \n返回 key 对应 list 的长度\n\nSet（集合）\n格式: sadd  name  value\nRedis的Set是string类型的无序集合。\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。\n\nzset(sorted set：有序集合)\n格式: zadd  name score value\nRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\nzset的成员是唯一的,但分数(score)却可以重复。\n\n##### 什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\n持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。\nRedis 提供了两种持久化方式:RDB（默认） 和AOF \nRDB：rdb是Redis DataBase缩写\n功能核心函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）两个函数\n{% asset_img 1481291-20180925141429889-1694430603.png%}\nAOF:\nAof是Append-only file缩写\n![avatar](images/1481291-20180925141527592-2105439510.png)\n每当执行服务器(定时)任务或者函数时flushAppendOnlyFile 函数都会被调用， 这个函数执行以下两个工作\naof写入保存：\nWRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件\nSAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中。\n存储结构:\n  内容是redis通讯协议(RESP )格式的命令文本存储。\n\n比较：\n1、aof文件比rdb更新频率高，优先使用aof还原数据。\n2、aof比rdb更安全也更大\n3、rdb性能比aof好\n4、如果两个都配了优先加载AOF\n\n##### 刚刚上面你有提到redis通讯协议(RESP )，能解释下什么是RESP？有什么特点？（可以看到很多面试其实都是连环炮，面试官其实在等着你回答到这个点，如果你答上了对你的评价就又加了一分）\nRESP 是redis客户端和服务端之前使用的一种通讯协议；\nRESP 的特点：实现简单、快速解析、可读性好\nFor Simple Strings the first byte of the reply is \"+\" 回复\nFor Errors the first byte of the reply is \"-\" 错误\nFor Integers the first byte of the reply is \":\" 整数\nFor Bulk Strings the first byte of the reply is \"$\" 字符串\nFor Arrays the first byte of the reply is \"*\" 数组\n\n##### Redis 有哪些架构模式？讲讲各自的特点\n单机版\n ![avatar](images/1481291-20180925142100480-1152515615.png)\n特点：简单\n问题：\n1、内存容量有限 2、处理能力有限 3、无法高可用。\n主从复制\n![avatar](images/1481291-20180925142118041-1727225479.png)\nRedis 的复制（replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。 只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据，主服务器就会一直将发生在自己身上的数据更新同步 给从服务器，从而一直保证主从服务器的数据相同。\n特点：\n1、master/slave 角色\n2、master/slave 数据相同\n3、降低 master 读压力在转交从库\n问题：\n无法保证高可用\n没有解决 master 写的压力\n\n哨兵\n![avatar](images/1481291-20180925142143478-1454265814.png)\nRedis sentinel 是一个分布式系统中监控 redis 主从服务器，并在主服务器下线时自动进行故障转移。其中三个特性：\n监控（Monitoring）：    Sentinel  会不断地检查你的主服务器和从服务器是否运作正常。\n提醒（Notification）： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。\n自动故障迁移（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作。\n特点：\n1、保证高可用\n2、监控各个节点\n3、自动故障迁移\n缺点：主从模式，切换需要时间丢数据\n没有解决 master 写的压力\n\n集群（proxy 型）：\n![avatar](images/1481291-20180925142206124-913246424.png)\nTwemproxy 是一个 Twitter 开源的一个 redis 和 memcache 快速/轻量级代理服务器； Twemproxy 是一个快速的单线程代理程序，支持 Memcached ASCII 协议和 redis 协议。\n特点：\n1、多种 hash 算法：MD5、CRC16、CRC32、CRC32a、hsieh、murmur、Jenkins \n2、支持失败节点自动删除\n3、后端 Sharding 分片逻辑对业务透明，业务方的读写方式和操作单个 Redis 一致\n缺点：增加了新的 proxy，需要维护其高可用。\nfailover 逻辑需要自己实现，其本身不能支持故障的自动转移可扩展性差，进行扩缩容都需要手动干预\n\n集群（直连型）：\n![avatar](images/1481291-20180925142304757-1498788186.png)\n从redis 3.0之后版本支持redis-cluster集群，Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。\n\n特点：\n1、无中心架构（不存在哪个节点影响性能瓶颈），少了 proxy 层。\n2、数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布。\n3、可扩展性，可线性扩展到 1000 个节点，节点可动态添加或删除。\n4、高可用性，部分节点不可用时，集群仍可用。通过增加 Slave 做备份数据副本\n5、实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave到 Master 的角色提升。\n缺点：\n1、资源隔离性较差，容易出现相互影响的情况。\n2、数据通过异步复制,不保证数据的强一致性\n\n##### 什么是一致性哈希算法？什么是哈希槽？\n这两个问题篇幅过长 网上找了两个解锁的不错的文章\nhttps://www.cnblogs.com/lpfuture/p/5796398.html\nhttps://blog.csdn.net/z15732621582/article/details/79121213\n\n\n##### Redis常用命令？\nKeys pattern\n*表示区配所有\n以bit开头的\n查看Exists  key是否存在\nSet\n设置 key 对应的值为 string 类型的 value。\nsetnx\n设置 key 对应的值为 string 类型的 value。如果 key 已经存在，返回 0，nx 是 not exist 的意思。\n删除某个key\n第一次返回1 删除了 第二次返回0\nExpire 设置过期时间（单位秒）\nTTL查看剩下多少时间\n返回负数则key失效，key不存在了\nSetex\n设置 key 对应的值为 string 类型的 value，并指定此键值对应的有效期。\nMset\n一次设置多个 key 的值，成功返回 ok 表示所有的值都设置了，失败返回 0 表示没有任何值被设置。\nGetset\n设置 key 的值，并返回 key 的旧值。\nMget\n一次获取多个 key 的值，如果对应 key 不存在，则对应返回 nil。\nIncr\n对 key 的值做加加操作,并返回新的值。注意 incr 一个不是 int 的 value 会返回错误，incr 一个不存在的 key，则设置 key 为 1\nincrby\n同 incr 类似，加指定值 ，key 不存在时候会设置 key，并认为原来的 value 是 0\nDecr\n对 key 的值做的是减减操作，decr 一个不存在 key，则设置 key 为-1\nDecrby\n同 decr，减指定值。\nAppend\n给指定 key 的字符串值追加 value,返回新字符串值的长度。\nStrlen\n取指定 key 的 value 值的长度。\npersist xxx(取消过期时间)\n选择数据库（0-15库）\nSelect 0 //选择数据库\nmove age 1//把age 移动到1库\nRandomkey随机返回一个key\nRename重命名\nType 返回数据类型\n\n##### 使用过Redis分布式锁么，它是怎么实现的？\n\n先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。\n如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？\nset指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！\n\n##### 使用过Redis做异步队列么，你是怎么用的？有什么缺点？\n\n一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。\n缺点：\n在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。\n能不能生产一次消费多次呢？\n使用pub/sub主题订阅者模式，可以实现1:N的消息队列。\n\n##### 什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？\n缓存穿透\n一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value，就应该去后端系统查找（比如DB）。一些恶意的请求会故意查询不存在的key,请求量很大，就会对后端系统造成很大的压力。这就叫做缓存穿透。\n如何避免？\n1：对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert了之后清理缓存。\n2：对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该bitmap过滤。\n\n缓存雪崩\n当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大压力。导致系统崩溃。\n如何避免？\n1：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。\n2：做二级缓存，A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为短期，A2设置为长期\n3：不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。","slug":"Redis相关","published":1,"updated":"2019-03-04T06:37:10.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjszwekqf000r5okblojaxb7q","content":"<p>介绍：Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API的非关系型数据库。<br>传统数据库遵循 ACID 规则。而 Nosql（Not Only SQL 的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称） 一般为分布式而分布式一般遵循 CAP 定理。<br>Github 源码：<a href=\"https://github.com/antirez/redis\" target=\"_blank\" rel=\"noopener\">https://github.com/antirez/redis</a><br>Redis 官网：<a href=\"https://redis.io/\" target=\"_blank\" rel=\"noopener\">https://redis.io/</a></p>\n<h5 id=\"Redis支持的数据类型？\"><a href=\"#Redis支持的数据类型？\" class=\"headerlink\" title=\"Redis支持的数据类型？\"></a>Redis支持的数据类型？</h5><p>String字符串<br>格式: set key value<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p>\n<p>Hash（哈希）<br>格式: hmset name  key1 value1 key2 value2<br>Redis hash 是一个键值(key=&gt;value)对集合。<br>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br><a id=\"more\"></a></p>\n<p>List（列表）<br>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）<br>格式: lpush  name  value<br>在 key 对应 list 的头部添加字符串元素<br>格式: rpush  name  value<br>在 key 对应 list 的尾部添加字符串元素<br>格式: lrem name  index<br>key 对应 list 中删除 count 个和 value 相同的元素<br>格式: llen name<br>返回 key 对应 list 的长度</p>\n<p>Set（集合）<br>格式: sadd  name  value<br>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>\n<p>zset(sorted set：有序集合)<br>格式: zadd  name score value<br>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。</p>\n<h5 id=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"><a href=\"#什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\" class=\"headerlink\" title=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"></a>什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？</h5><p>持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。<br>Redis 提供了两种持久化方式:RDB（默认） 和AOF<br>RDB：rdb是Redis DataBase缩写<br>功能核心函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）两个函数<br><img src=\"/2019/03/04/Redis相关/1481291-20180925141429889-1694430603.png\"><br>AOF:<br>Aof是Append-only file缩写<br><img src=\"/2019/03/04/Redis相关/1481291-20180925141527592-2105439510.png\" alt=\"avatar\"><br>每当执行服务器(定时)任务或者函数时flushAppendOnlyFile 函数都会被调用， 这个函数执行以下两个工作<br>aof写入保存：<br>WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件<br>SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中。<br>存储结构:<br>  内容是redis通讯协议(RESP )格式的命令文本存储。</p>\n<p>比较：<br>1、aof文件比rdb更新频率高，优先使用aof还原数据。<br>2、aof比rdb更安全也更大<br>3、rdb性能比aof好<br>4、如果两个都配了优先加载AOF</p>\n<h5 id=\"刚刚上面你有提到redis通讯协议-RESP-，能解释下什么是RESP？有什么特点？（可以看到很多面试其实都是连环炮，面试官其实在等着你回答到这个点，如果你答上了对你的评价就又加了一分）\"><a href=\"#刚刚上面你有提到redis通讯协议-RESP-，能解释下什么是RESP？有什么特点？（可以看到很多面试其实都是连环炮，面试官其实在等着你回答到这个点，如果你答上了对你的评价就又加了一分）\" class=\"headerlink\" title=\"刚刚上面你有提到redis通讯协议(RESP )，能解释下什么是RESP？有什么特点？（可以看到很多面试其实都是连环炮，面试官其实在等着你回答到这个点，如果你答上了对你的评价就又加了一分）\"></a>刚刚上面你有提到redis通讯协议(RESP )，能解释下什么是RESP？有什么特点？（可以看到很多面试其实都是连环炮，面试官其实在等着你回答到这个点，如果你答上了对你的评价就又加了一分）</h5><p>RESP 是redis客户端和服务端之前使用的一种通讯协议；<br>RESP 的特点：实现简单、快速解析、可读性好<br>For Simple Strings the first byte of the reply is “+” 回复<br>For Errors the first byte of the reply is “-“ 错误<br>For Integers the first byte of the reply is “:” 整数<br>For Bulk Strings the first byte of the reply is “$” 字符串<br>For Arrays the first byte of the reply is “*” 数组</p>\n<h5 id=\"Redis-有哪些架构模式？讲讲各自的特点\"><a href=\"#Redis-有哪些架构模式？讲讲各自的特点\" class=\"headerlink\" title=\"Redis 有哪些架构模式？讲讲各自的特点\"></a>Redis 有哪些架构模式？讲讲各自的特点</h5><p>单机版<br> <img src=\"/2019/03/04/Redis相关/1481291-20180925142100480-1152515615.png\" alt=\"avatar\"><br>特点：简单<br>问题：<br>1、内存容量有限 2、处理能力有限 3、无法高可用。<br>主从复制<br><img src=\"/2019/03/04/Redis相关/1481291-20180925142118041-1727225479.png\" alt=\"avatar\"><br>Redis 的复制（replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。 只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据，主服务器就会一直将发生在自己身上的数据更新同步 给从服务器，从而一直保证主从服务器的数据相同。<br>特点：<br>1、master/slave 角色<br>2、master/slave 数据相同<br>3、降低 master 读压力在转交从库<br>问题：<br>无法保证高可用<br>没有解决 master 写的压力</p>\n<p>哨兵<br><img src=\"/2019/03/04/Redis相关/1481291-20180925142143478-1454265814.png\" alt=\"avatar\"><br>Redis sentinel 是一个分布式系统中监控 redis 主从服务器，并在主服务器下线时自动进行故障转移。其中三个特性：<br>监控（Monitoring）：    Sentinel  会不断地检查你的主服务器和从服务器是否运作正常。<br>提醒（Notification）： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。<br>自动故障迁移（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作。<br>特点：<br>1、保证高可用<br>2、监控各个节点<br>3、自动故障迁移<br>缺点：主从模式，切换需要时间丢数据<br>没有解决 master 写的压力</p>\n<p>集群（proxy 型）：<br><img src=\"/2019/03/04/Redis相关/1481291-20180925142206124-913246424.png\" alt=\"avatar\"><br>Twemproxy 是一个 Twitter 开源的一个 redis 和 memcache 快速/轻量级代理服务器； Twemproxy 是一个快速的单线程代理程序，支持 Memcached ASCII 协议和 redis 协议。<br>特点：<br>1、多种 hash 算法：MD5、CRC16、CRC32、CRC32a、hsieh、murmur、Jenkins<br>2、支持失败节点自动删除<br>3、后端 Sharding 分片逻辑对业务透明，业务方的读写方式和操作单个 Redis 一致<br>缺点：增加了新的 proxy，需要维护其高可用。<br>failover 逻辑需要自己实现，其本身不能支持故障的自动转移可扩展性差，进行扩缩容都需要手动干预</p>\n<p>集群（直连型）：<br><img src=\"/2019/03/04/Redis相关/1481291-20180925142304757-1498788186.png\" alt=\"avatar\"><br>从redis 3.0之后版本支持redis-cluster集群，Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。</p>\n<p>特点：<br>1、无中心架构（不存在哪个节点影响性能瓶颈），少了 proxy 层。<br>2、数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布。<br>3、可扩展性，可线性扩展到 1000 个节点，节点可动态添加或删除。<br>4、高可用性，部分节点不可用时，集群仍可用。通过增加 Slave 做备份数据副本<br>5、实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave到 Master 的角色提升。<br>缺点：<br>1、资源隔离性较差，容易出现相互影响的情况。<br>2、数据通过异步复制,不保证数据的强一致性</p>\n<h5 id=\"什么是一致性哈希算法？什么是哈希槽？\"><a href=\"#什么是一致性哈希算法？什么是哈希槽？\" class=\"headerlink\" title=\"什么是一致性哈希算法？什么是哈希槽？\"></a>什么是一致性哈希算法？什么是哈希槽？</h5><p>这两个问题篇幅过长 网上找了两个解锁的不错的文章<br><a href=\"https://www.cnblogs.com/lpfuture/p/5796398.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lpfuture/p/5796398.html</a><br><a href=\"https://blog.csdn.net/z15732621582/article/details/79121213\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/z15732621582/article/details/79121213</a></p>\n<h5 id=\"Redis常用命令？\"><a href=\"#Redis常用命令？\" class=\"headerlink\" title=\"Redis常用命令？\"></a>Redis常用命令？</h5><p>Keys pattern<br>*表示区配所有<br>以bit开头的<br>查看Exists  key是否存在<br>Set<br>设置 key 对应的值为 string 类型的 value。<br>setnx<br>设置 key 对应的值为 string 类型的 value。如果 key 已经存在，返回 0，nx 是 not exist 的意思。<br>删除某个key<br>第一次返回1 删除了 第二次返回0<br>Expire 设置过期时间（单位秒）<br>TTL查看剩下多少时间<br>返回负数则key失效，key不存在了<br>Setex<br>设置 key 对应的值为 string 类型的 value，并指定此键值对应的有效期。<br>Mset<br>一次设置多个 key 的值，成功返回 ok 表示所有的值都设置了，失败返回 0 表示没有任何值被设置。<br>Getset<br>设置 key 的值，并返回 key 的旧值。<br>Mget<br>一次获取多个 key 的值，如果对应 key 不存在，则对应返回 nil。<br>Incr<br>对 key 的值做加加操作,并返回新的值。注意 incr 一个不是 int 的 value 会返回错误，incr 一个不存在的 key，则设置 key 为 1<br>incrby<br>同 incr 类似，加指定值 ，key 不存在时候会设置 key，并认为原来的 value 是 0<br>Decr<br>对 key 的值做的是减减操作，decr 一个不存在 key，则设置 key 为-1<br>Decrby<br>同 decr，减指定值。<br>Append<br>给指定 key 的字符串值追加 value,返回新字符串值的长度。<br>Strlen<br>取指定 key 的 value 值的长度。<br>persist xxx(取消过期时间)<br>选择数据库（0-15库）<br>Select 0 //选择数据库<br>move age 1//把age 移动到1库<br>Randomkey随机返回一个key<br>Rename重命名<br>Type 返回数据类型</p>\n<h5 id=\"使用过Redis分布式锁么，它是怎么实现的？\"><a href=\"#使用过Redis分布式锁么，它是怎么实现的？\" class=\"headerlink\" title=\"使用过Redis分布式锁么，它是怎么实现的？\"></a>使用过Redis分布式锁么，它是怎么实现的？</h5><p>先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。<br>如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？<br>set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！</p>\n<h5 id=\"使用过Redis做异步队列么，你是怎么用的？有什么缺点？\"><a href=\"#使用过Redis做异步队列么，你是怎么用的？有什么缺点？\" class=\"headerlink\" title=\"使用过Redis做异步队列么，你是怎么用的？有什么缺点？\"></a>使用过Redis做异步队列么，你是怎么用的？有什么缺点？</h5><p>一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。<br>缺点：<br>在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。<br>能不能生产一次消费多次呢？<br>使用pub/sub主题订阅者模式，可以实现1:N的消息队列。</p>\n<h5 id=\"什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？\"><a href=\"#什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？\" class=\"headerlink\" title=\"什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？\"></a>什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？</h5><p>缓存穿透<br>一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value，就应该去后端系统查找（比如DB）。一些恶意的请求会故意查询不存在的key,请求量很大，就会对后端系统造成很大的压力。这就叫做缓存穿透。<br>如何避免？<br>1：对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert了之后清理缓存。<br>2：对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该bitmap过滤。</p>\n<p>缓存雪崩<br>当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大压力。导致系统崩溃。<br>如何避免？<br>1：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。<br>2：做二级缓存，A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为短期，A2设置为长期<br>3：不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>\n","site":{"data":{}},"excerpt":"<p>介绍：Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API的非关系型数据库。<br>传统数据库遵循 ACID 规则。而 Nosql（Not Only SQL 的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称） 一般为分布式而分布式一般遵循 CAP 定理。<br>Github 源码：<a href=\"https://github.com/antirez/redis\" target=\"_blank\" rel=\"noopener\">https://github.com/antirez/redis</a><br>Redis 官网：<a href=\"https://redis.io/\" target=\"_blank\" rel=\"noopener\">https://redis.io/</a></p>\n<h5 id=\"Redis支持的数据类型？\"><a href=\"#Redis支持的数据类型？\" class=\"headerlink\" title=\"Redis支持的数据类型？\"></a>Redis支持的数据类型？</h5><p>String字符串<br>格式: set key value<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p>\n<p>Hash（哈希）<br>格式: hmset name  key1 value1 key2 value2<br>Redis hash 是一个键值(key=&gt;value)对集合。<br>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br></p>","more":"<p></p>\n<p>List（列表）<br>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）<br>格式: lpush  name  value<br>在 key 对应 list 的头部添加字符串元素<br>格式: rpush  name  value<br>在 key 对应 list 的尾部添加字符串元素<br>格式: lrem name  index<br>key 对应 list 中删除 count 个和 value 相同的元素<br>格式: llen name<br>返回 key 对应 list 的长度</p>\n<p>Set（集合）<br>格式: sadd  name  value<br>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>\n<p>zset(sorted set：有序集合)<br>格式: zadd  name score value<br>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。</p>\n<h5 id=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"><a href=\"#什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\" class=\"headerlink\" title=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"></a>什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？</h5><p>持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。<br>Redis 提供了两种持久化方式:RDB（默认） 和AOF<br>RDB：rdb是Redis DataBase缩写<br>功能核心函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）两个函数<br><img src=\"/2019/03/04/Redis相关/1481291-20180925141429889-1694430603.png\"><br>AOF:<br>Aof是Append-only file缩写<br><img src=\"/2019/03/04/Redis相关/1481291-20180925141527592-2105439510.png\" alt=\"avatar\"><br>每当执行服务器(定时)任务或者函数时flushAppendOnlyFile 函数都会被调用， 这个函数执行以下两个工作<br>aof写入保存：<br>WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件<br>SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中。<br>存储结构:<br>  内容是redis通讯协议(RESP )格式的命令文本存储。</p>\n<p>比较：<br>1、aof文件比rdb更新频率高，优先使用aof还原数据。<br>2、aof比rdb更安全也更大<br>3、rdb性能比aof好<br>4、如果两个都配了优先加载AOF</p>\n<h5 id=\"刚刚上面你有提到redis通讯协议-RESP-，能解释下什么是RESP？有什么特点？（可以看到很多面试其实都是连环炮，面试官其实在等着你回答到这个点，如果你答上了对你的评价就又加了一分）\"><a href=\"#刚刚上面你有提到redis通讯协议-RESP-，能解释下什么是RESP？有什么特点？（可以看到很多面试其实都是连环炮，面试官其实在等着你回答到这个点，如果你答上了对你的评价就又加了一分）\" class=\"headerlink\" title=\"刚刚上面你有提到redis通讯协议(RESP )，能解释下什么是RESP？有什么特点？（可以看到很多面试其实都是连环炮，面试官其实在等着你回答到这个点，如果你答上了对你的评价就又加了一分）\"></a>刚刚上面你有提到redis通讯协议(RESP )，能解释下什么是RESP？有什么特点？（可以看到很多面试其实都是连环炮，面试官其实在等着你回答到这个点，如果你答上了对你的评价就又加了一分）</h5><p>RESP 是redis客户端和服务端之前使用的一种通讯协议；<br>RESP 的特点：实现简单、快速解析、可读性好<br>For Simple Strings the first byte of the reply is “+” 回复<br>For Errors the first byte of the reply is “-“ 错误<br>For Integers the first byte of the reply is “:” 整数<br>For Bulk Strings the first byte of the reply is “$” 字符串<br>For Arrays the first byte of the reply is “*” 数组</p>\n<h5 id=\"Redis-有哪些架构模式？讲讲各自的特点\"><a href=\"#Redis-有哪些架构模式？讲讲各自的特点\" class=\"headerlink\" title=\"Redis 有哪些架构模式？讲讲各自的特点\"></a>Redis 有哪些架构模式？讲讲各自的特点</h5><p>单机版<br> <img src=\"/2019/03/04/Redis相关/1481291-20180925142100480-1152515615.png\" alt=\"avatar\"><br>特点：简单<br>问题：<br>1、内存容量有限 2、处理能力有限 3、无法高可用。<br>主从复制<br><img src=\"/2019/03/04/Redis相关/1481291-20180925142118041-1727225479.png\" alt=\"avatar\"><br>Redis 的复制（replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。 只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据，主服务器就会一直将发生在自己身上的数据更新同步 给从服务器，从而一直保证主从服务器的数据相同。<br>特点：<br>1、master/slave 角色<br>2、master/slave 数据相同<br>3、降低 master 读压力在转交从库<br>问题：<br>无法保证高可用<br>没有解决 master 写的压力</p>\n<p>哨兵<br><img src=\"/2019/03/04/Redis相关/1481291-20180925142143478-1454265814.png\" alt=\"avatar\"><br>Redis sentinel 是一个分布式系统中监控 redis 主从服务器，并在主服务器下线时自动进行故障转移。其中三个特性：<br>监控（Monitoring）：    Sentinel  会不断地检查你的主服务器和从服务器是否运作正常。<br>提醒（Notification）： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。<br>自动故障迁移（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作。<br>特点：<br>1、保证高可用<br>2、监控各个节点<br>3、自动故障迁移<br>缺点：主从模式，切换需要时间丢数据<br>没有解决 master 写的压力</p>\n<p>集群（proxy 型）：<br><img src=\"/2019/03/04/Redis相关/1481291-20180925142206124-913246424.png\" alt=\"avatar\"><br>Twemproxy 是一个 Twitter 开源的一个 redis 和 memcache 快速/轻量级代理服务器； Twemproxy 是一个快速的单线程代理程序，支持 Memcached ASCII 协议和 redis 协议。<br>特点：<br>1、多种 hash 算法：MD5、CRC16、CRC32、CRC32a、hsieh、murmur、Jenkins<br>2、支持失败节点自动删除<br>3、后端 Sharding 分片逻辑对业务透明，业务方的读写方式和操作单个 Redis 一致<br>缺点：增加了新的 proxy，需要维护其高可用。<br>failover 逻辑需要自己实现，其本身不能支持故障的自动转移可扩展性差，进行扩缩容都需要手动干预</p>\n<p>集群（直连型）：<br><img src=\"/2019/03/04/Redis相关/1481291-20180925142304757-1498788186.png\" alt=\"avatar\"><br>从redis 3.0之后版本支持redis-cluster集群，Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。</p>\n<p>特点：<br>1、无中心架构（不存在哪个节点影响性能瓶颈），少了 proxy 层。<br>2、数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布。<br>3、可扩展性，可线性扩展到 1000 个节点，节点可动态添加或删除。<br>4、高可用性，部分节点不可用时，集群仍可用。通过增加 Slave 做备份数据副本<br>5、实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave到 Master 的角色提升。<br>缺点：<br>1、资源隔离性较差，容易出现相互影响的情况。<br>2、数据通过异步复制,不保证数据的强一致性</p>\n<h5 id=\"什么是一致性哈希算法？什么是哈希槽？\"><a href=\"#什么是一致性哈希算法？什么是哈希槽？\" class=\"headerlink\" title=\"什么是一致性哈希算法？什么是哈希槽？\"></a>什么是一致性哈希算法？什么是哈希槽？</h5><p>这两个问题篇幅过长 网上找了两个解锁的不错的文章<br><a href=\"https://www.cnblogs.com/lpfuture/p/5796398.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lpfuture/p/5796398.html</a><br><a href=\"https://blog.csdn.net/z15732621582/article/details/79121213\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/z15732621582/article/details/79121213</a></p>\n<h5 id=\"Redis常用命令？\"><a href=\"#Redis常用命令？\" class=\"headerlink\" title=\"Redis常用命令？\"></a>Redis常用命令？</h5><p>Keys pattern<br>*表示区配所有<br>以bit开头的<br>查看Exists  key是否存在<br>Set<br>设置 key 对应的值为 string 类型的 value。<br>setnx<br>设置 key 对应的值为 string 类型的 value。如果 key 已经存在，返回 0，nx 是 not exist 的意思。<br>删除某个key<br>第一次返回1 删除了 第二次返回0<br>Expire 设置过期时间（单位秒）<br>TTL查看剩下多少时间<br>返回负数则key失效，key不存在了<br>Setex<br>设置 key 对应的值为 string 类型的 value，并指定此键值对应的有效期。<br>Mset<br>一次设置多个 key 的值，成功返回 ok 表示所有的值都设置了，失败返回 0 表示没有任何值被设置。<br>Getset<br>设置 key 的值，并返回 key 的旧值。<br>Mget<br>一次获取多个 key 的值，如果对应 key 不存在，则对应返回 nil。<br>Incr<br>对 key 的值做加加操作,并返回新的值。注意 incr 一个不是 int 的 value 会返回错误，incr 一个不存在的 key，则设置 key 为 1<br>incrby<br>同 incr 类似，加指定值 ，key 不存在时候会设置 key，并认为原来的 value 是 0<br>Decr<br>对 key 的值做的是减减操作，decr 一个不存在 key，则设置 key 为-1<br>Decrby<br>同 decr，减指定值。<br>Append<br>给指定 key 的字符串值追加 value,返回新字符串值的长度。<br>Strlen<br>取指定 key 的 value 值的长度。<br>persist xxx(取消过期时间)<br>选择数据库（0-15库）<br>Select 0 //选择数据库<br>move age 1//把age 移动到1库<br>Randomkey随机返回一个key<br>Rename重命名<br>Type 返回数据类型</p>\n<h5 id=\"使用过Redis分布式锁么，它是怎么实现的？\"><a href=\"#使用过Redis分布式锁么，它是怎么实现的？\" class=\"headerlink\" title=\"使用过Redis分布式锁么，它是怎么实现的？\"></a>使用过Redis分布式锁么，它是怎么实现的？</h5><p>先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。<br>如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？<br>set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！</p>\n<h5 id=\"使用过Redis做异步队列么，你是怎么用的？有什么缺点？\"><a href=\"#使用过Redis做异步队列么，你是怎么用的？有什么缺点？\" class=\"headerlink\" title=\"使用过Redis做异步队列么，你是怎么用的？有什么缺点？\"></a>使用过Redis做异步队列么，你是怎么用的？有什么缺点？</h5><p>一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。<br>缺点：<br>在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。<br>能不能生产一次消费多次呢？<br>使用pub/sub主题订阅者模式，可以实现1:N的消息队列。</p>\n<h5 id=\"什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？\"><a href=\"#什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？\" class=\"headerlink\" title=\"什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？\"></a>什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？</h5><p>缓存穿透<br>一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value，就应该去后端系统查找（比如DB）。一些恶意的请求会故意查询不存在的key,请求量很大，就会对后端系统造成很大的压力。这就叫做缓存穿透。<br>如何避免？<br>1：对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert了之后清理缓存。<br>2：对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该bitmap过滤。</p>\n<p>缓存雪崩<br>当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大压力。导致系统崩溃。<br>如何避免？<br>1：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。<br>2：做二级缓存，A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为短期，A2设置为长期<br>3：不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>"},{"title":"HashMap源码篇","date":"2019-03-04T04:52:46.000Z","catalogue":"java","_content":"<font color=\"red\">本文转载自 https://www.cnblogs.com/zhaojj/p/7805376.html<font>\n#### 目的：\n单纯分析和学习hashmap的实现，不多说与Hashtable、ConcurrentHashMap等的区别。\n基于 jdk1.8\n\n在面试中有些水平的公司比较喜欢问HashMap原理，其中涉及的点比较多，而且大多能形成连环炮形式的问题。\n\n一般连环炮，一环不知道后面试官也就不问了，但是低层连环没连上，恭喜扣分是大大的，连到比较深的时候，说不知道还好点，比如：\n\n关于集合的\n1.1Hashmap是不是有序的？   不是继续\n\n1.2有没有有顺序的Map？     TreeMap  LinkedHashMap\n\n1.3它们是怎么来保证顺序的？   一般都要说到其源码，要不说不清为么有序\n\n1.4答两个有序或以上的 继续  你觉得它们有序的区别，那个比较好，在什么场景用哪个好？\n\n1.4答一个也可以问上面的场景  继续\n\n1.5你觉得有没有更好或者更高效的实现方式？有\n\n1.6 答有  这个时候说起来可能就要跑到底层数据结构上去了\n\n数据结构继续衍生 到 算法等等。。。\n\n就这一个遇到大佬问你，能把很多人连到怀疑人生\n<!--more-->\n\n2.关于hash的\n\n1.1  hashmap基本的节点结构？  Node  键值对\n\n1.2  键是什么样的，我用字符串a那键就是a嘛？   不是会进行hash\n\n1.3  如何hash的  这样hash有什么好处？   源码hashmap的hash算法\n\n1.4  Hash在java中主要作用是什么？\n\n1.5  Hashcode  equal相关   需要同时重写？原因？\n\n1.6  equal引出的对象地址、string带有字符串缓冲区、字符串常量池\n\n等等。。。\n\n3.关于线程安全问题、到concurrent包等\n\n前面说这些就是想说，hashmap中用到的东西很多，深入学习和理解对每个想晋升的程序员来说基本是必须，同时由它引出的对比，也是无限多，有很大的必要学习。\n\n#### HashMap类加载\n\n1.只有一些静态属性会进行赋值，具体每个值什么用，暂时不管\n\n```\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n\nstatic final int TREEIFY_THRESHOLD = 8;\n\nstatic final int UNTREEIFY_THRESHOLD = 6;\n\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n```\n\n#### 开始使用，第一步我们肯定是初始化方法，先从默认的构造方法开始学习\n\n```\npublic HashMap() {\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n    }\n1.AbstractMap父类，构造方法也没干事不谈\n2.只是赋值loadFactor 0.75f 没干别的事\n3.static final float DEFAULT_LOAD_FACTOR = 0.75f;\n4.loadFactor属性 作用先放着后面用到再看\n5.没干别的事了\n```\n#### 一般我们的使用第二步就是put了\n先看常用的put键值对，这个学完了，那么其他的put方法就没什么问题了，比如putAll、putIfAbsent、putMapEntries\n\n同时put弄明白了 取值就是一个反向就简单了\n\n```\npublic V put(K key, V value) {\n  return putVal(hash(key), key, value, false, true);\n}\n```\n\n1.先对key进行hash计算，学一下\n\n```\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n1.1 看出key是可以空的  hash为0\n1.2 (h = key.hashCode()) ^ (h >>> 16)   第一步取key的hashcode值  关于更底层的hashcode是什么 有兴趣再看\n    h ^ (h >>> 16)  第二步 高位参与运算\n这个hash值的重要性就不说了，这里这么干是出于性能考虑，底层的移位和异或运算肯定比加减乘除取模等效率好 \nhashcode是32位的，无符号右移16位，那生成的就是16位0加原高位的16位值， 就是对半了，异或计算也就变成了高16位和低16位进行异或，\n原高16位不变。这么干主要用于当hashmap 数组比较小的时候所有bit都参与运算了，防止hash冲突太大，\n所谓hash冲突是指不同的key计算出的hash是一样的，比如a和97，这个肯定是存在的没毛病\n```\n2.putVal \n\n```\n  /**\n     * Implements Map.put and related methods\n     *\n     * @param hash hash for key\n     * @param key the key\n     * @param value the value to put\n     * @param onlyIfAbsent if true, don't change existing value   相同key是不是覆盖值\n     * @param evict if false, the table is in creation mode.    在hashmap中没用\n     * @return previous value, or null if none\n     */\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        else {\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n    2.1 执行顺序\n        第一句  Node<K,V>[] tab; Node<K,V> p; int n, i; 申明变量\n            Node是啥,学习一下：\n                static class Node<K,V> implements Map.Entry<K,V> {\n                    final int hash;\n                    final K key;\n                    V value;\n                    Node<K,V> next;\n\n                    Node(int hash, K key, V value, Node<K,V> next) {\n                        this.hash = hash;\n                        this.key = key;\n                        this.value = value;\n                        this.next = next;\n                    }\n\n                    public final K getKey()        { return key; }\n                    public final V getValue()      { return value; }\n                    public final String toString() { return key + \"=\" + value; }\n\n                    public final int hashCode() {\n                        return Objects.hashCode(key) ^ Objects.hashCode(value);\n                    }\n\n                    public final V setValue(V newValue) {\n                        V oldValue = value;\n                        value = newValue;\n                        return oldValue;\n                    }\n\n                    public final boolean equals(Object o) {\n                        if (o == this)\n                            return true;\n                        if (o instanceof Map.Entry) {\n                            Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n                            if (Objects.equals(key, e.getKey()) &&\n                                Objects.equals(value, e.getValue()))\n                                return true;\n                        }\n                        return false;\n                    }\n                }\n            是内部的一个静态类，看看就明白了，明显是一个带有3个值，hash、key、value和另一个Node对象引用的HashMap子元素结构，即我们装的每个键值对就用一个Node对象存放\n            \n        第二句 if ((tab = table) == null || (n = tab.length) == 0) 这句\n            tab = table赋值，table现在是null的，so n = tab.length不运行了 运行这个if的代码块\n        第三句 n = (tab = resize()).length;   从下面的执行知道 n=16\n            调用resize()，返回Node数组，这个resize是一个非常重要的方法，我们就依现在的对象状态去看这个方法，不带入其他状态，认真研究学习下\n                final Node<K,V>[] resize() {\n                    Node<K,V>[] oldTab = table;\n                    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n                    int oldThr = threshold;\n                    int newCap, newThr = 0;\n                    if (oldCap > 0) {\n                        if (oldCap >= MAXIMUM_CAPACITY) {\n                            threshold = Integer.MAX_VALUE;\n                            return oldTab;\n                        }\n                        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n                            newThr = oldThr << 1; // double threshold\n                    }\n                    else if (oldThr > 0) // initial capacity was placed in threshold\n                        newCap = oldThr;\n                    else {               // zero initial threshold signifies using defaults\n                        newCap = DEFAULT_INITIAL_CAPACITY;\n                        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n                    }\n                    if (newThr == 0) {\n                        float ft = (float)newCap * loadFactor;\n                        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                                  (int)ft : Integer.MAX_VALUE);\n                    }\n                    threshold = newThr;\n                    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n                        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n                    table = newTab;\n                    if (oldTab != null) {\n                        for (int j = 0; j < oldCap; ++j) {\n                            Node<K,V> e;\n                            if ((e = oldTab[j]) != null) {\n                                oldTab[j] = null;\n                                if (e.next == null)\n                                    newTab[e.hash & (newCap - 1)] = e;\n                                else if (e instanceof TreeNode)\n                                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                                else { // preserve order\n                                    Node<K,V> loHead = null, loTail = null;\n                                    Node<K,V> hiHead = null, hiTail = null;\n                                    Node<K,V> next;\n                                    do {\n                                        next = e.next;\n                                        if ((e.hash & oldCap) == 0) {\n                                            if (loTail == null)\n                                                loHead = e;\n                                            else\n                                                loTail.next = e;\n                                            loTail = e;\n                                        }\n                                        else {\n                                            if (hiTail == null)\n                                                hiHead = e;\n                                            else\n                                                hiTail.next = e;\n                                            hiTail = e;\n                                        }\n                                    } while ((e = next) != null);\n                                    if (loTail != null) {\n                                        loTail.next = null;\n                                        newTab[j] = loHead;\n                                    }\n                                    if (hiTail != null) {\n                                        hiTail.next = null;\n                                        newTab[j + oldCap] = hiHead;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    return newTab;\n                }\n            resize  1.Node<K,V>[] oldTab = table; 在上面知道table是null的，so  oldTab也是null\n                    2.int oldCap = (oldTab == null) ? 0 : oldTab.length;   oldCap=0\n                    3.int oldThr = threshold;   threshold我们没赋值过，int初始0 ， oldThr=threshold=0\n                    4.int newCap, newThr = 0;  不谈\n                    5.if (oldCap > 0) {    oldCap=0  if不运行\n                    6.else if (oldThr > 0)  oldThr=0  if也不运行\n                    7.else {\n                            newCap = DEFAULT_INITIAL_CAPACITY;       DEFAULT_INITIAL_CAPACITY静态成员变量，初始 static final int DEFAULT_INITIAL_CAPACITY = 1 << 4     so newCap=16\n                            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);   static final float DEFAULT_LOAD_FACTOR = 0.75f;   0.75*16=12   newThr=12\n                        }\n                    8.  if (newThr == 0) {     newThr=12 if不运行\n                    9.  threshold = newThr;    threshold = newThr=12\n                    10. Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap]   申明一个16个大小的Node数组\n                    11. table = newTab;   看出来了吧，table是成员变量，也就表明，HashMap初始数据结构是一个16的Node数组\n                    12.  if (oldTab != null) {   oldTab是1中赋值的null，if不运行\n                    13.  return newTab;  返回16大小的node数组\n                总结，这一波调用是初次调用其实没干别的事，就是定义了基本的数据结构是16个Node数组，但是这个方法不简单，因为一些if没走\n                \n        第四句     if ((p = tab[i = (n - 1) & hash]) == null)\n            n=16   15&hash 结果肯定是0-15，这里就看出，这是在计算一个key应该在整个数据结构16的数组中的索引了，并赋值给i变量，后面不管整体结构n变多大，这种计算key所在的索引是非常棒的设计。\n            现在的状态是初始的 肯定是null的吧  if运行\n            \n        第五句 tab[i] = newNode(hash, key, value, null); new一个节点Node，放在数组里，i是第四句计算的索引\n        第六句 else {  不运行\n        第七句  ++modCount;   transient int modCount; 根据注释可以看出，这个是记录数据结构变动次数的，put值肯定是变了的\n        第八句  if (++size > threshold)  size=1  threshold在调用resize时赋值12   if不运行\n        第九句 afterNodeInsertion(evict);  没干事\n        第十句   return null; 不谈\n\n```\n3.putVal 再回头详走,第一遍干了很多初始化的事有些东西还没研究到\n\n```\n  final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        else {\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n    \n        第一句  Node<K,V>[] tab; Node<K,V> p; int n, i; 申明变量不谈\n        第二句 if ((tab = table) == null || (n = tab.length) == 0) 这句\n            tab = table赋值，table现在是16数组 n=16  if不运行\n        第三句 if ((p = tab[i = (n - 1) & hash]) == null) \n            再看就知道了判断当前存的key计算出的索引位置是不是已经存过值了\n            没存过就新Node存  和上面一遍一样   我们当已经有值了\n            有值其实就意味着发生hash冲突了  比如key分别是a和97 hashCode都是97 冲突\n            因此这次我们主要看下一个else里面HashMap是怎么处理冲突的\n        第四句     else中内容  即冲突处理\n            p是冲突时数组该索引位置的元素\n                1. p.hash == hash &&((k = p.key) == key || (key != null && key.equals(k)))\n                    判断新元素hash和key是不是都和p相同，相同表示存了一样的key\n                    直接赋值给e\n                2. p instanceof TreeNode（红黑树，具体的红黑树算法这里就不详细写了，有兴趣可以去学习）\n                    怎么猛然来个红黑树，再3里说\n                    判断原来元素是不是 TreeNode 类型\n                    TreeNode一样是静态内部类，再看看就是红黑树的节点，因此这个地方用到了红黑树\n                    putTreeVal 向红黑树中添加元素\n                    内部实现，存在相同key就返回赋值给e  不存在就添加并返回null 源码就是红黑树算法\n                3.key不同也不是红黑树\n                     if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                    }\n                    先不看再里面的那个if，这个一看就知道了吧，明显的链表啊，而且数据里的这个元素是链表头\n                    整个循环，明显是在从头开始遍历链表，找到相同key或链表找完了新元素挂链表最后\n                    \n                    但在其中还有这么个if\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                        这是在链表找完了，且新元素已经挂在链表最后了有的一个判断\n                        判断循环次数，其实就是链表长度，长度超过TREEIFY_THRESHOLD 默认8则运行treeifyBin(tab, hash);\n                    就是这个方法把链表变成红黑树了，具体方法源码不谈了，学红黑树就可以了\n            \n            最后判断e是不是空，上面的冲突方案看出e不是空就是表示有相同的key进行value覆盖就可以，e空就是无相同key且完成了数据挂载\n            \n        \n        总结这次再走一遍putVal就是为了学习HashMap的冲突处理方案，也看出内存结构是数组、链表、红黑树组成的，红黑树是java8新引进，是基于性能的考虑，在冲突大时，红黑树算法会比链表综合表现更好\n```\n\n4.resize 再详走 putVal最后一段size>threshold  threshold初始12 ++size元素数量肯定会有超12个的时候，\n这里也就看出了threshold代表HashMap的容量，到上限就要扩容了，默认现在16数组，12元素上限\n\n```\n  1.Node<K,V>[] oldTab = table;  16大小\n        2.int oldCap = (oldTab == null) ? 0 : oldTab.length;   oldCap=16\n        3.int oldThr = threshold;     12\n        4.int newCap, newThr = 0;  不谈\n        5.if (oldCap > 0) {         oldCap=16运行  oldCap是整体结构数组大小\n                if (oldCap >= MAXIMUM_CAPACITY) {    判断数组大小是不是已经到上限1<<30\n                    threshold = Integer.MAX_VALUE;  到达上线 threshold 赋值最大值 然后返回 表示之后就不再干别的事了，随便存，随便hash冲突去，就这么大，无限增加红黑树节点了\n                    return oldTab;\n                }\n                else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                         oldCap >= DEFAULT_INITIAL_CAPACITY)   赋值newCap为2倍数组大小，判断如果扩充2倍有没到上限，且不扩充时容量是否大于默认的16\n                    newThr = oldThr << 1; // double threshold   满足则赋值  容量改为24\n            }\n            这段看出到threshold容量了就进行2倍扩容\n        6.if (newThr == 0) {    如果运行该if 0 表示5步中扩容2倍到上限或原数组大小小于16\n            float ft = (float)newCap * loadFactor;      newCap现在是2倍原大小的*0.75   2倍数组大小时的容量\n            newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);     判断2倍数组大小和2倍后的容量是不是都小于最高值，是则赋值新容量，不是就用整形最大值\n            }\n        7.  threshold = newThr;  把5 6两步算出的新容量赋值给HashMap  也说明要扩容了\n        8.   Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n            和后面的循环主要就是把原数组中的元素，一个一个添加到新数组中，转移的一个过程\n        \n    总结，这一波调用是了解HashMap的扩容方式，看下来就是2倍扩容直到上限\n```\n5.总结，到这put就比较详细了，也知道了基本结构是数组、链表、红黑树，链表到8个时转换成红黑树\n同时每次进行2倍扩容和数据转移，扩容是用新结构的那显然减少扩容次数会有更好的性能\n那就要求每次声明HashMap时最好是指定大小的\n\n#### 一些其他我们需要知道的\n1.指定大小的初始化\n\n```\n  public HashMap(int initialCapacity) {\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    }\n    public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }\n    第一个常用，第二个建议是不用，不去动0.75的这个容量比例，当然不绝对\n    这里tableSizeFor是一个很神奇的算法，我非常佩服的一个算法\n        static final int tableSizeFor(int cap) {\n            int n = cap - 1;\n            n |= n >>> 1;\n            n |= n >>> 2;\n            n |= n >>> 4;\n            n |= n >>> 8;\n            n |= n >>> 16;\n            return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n        }\n        这个方法是在找大于等于cap且最小2的幂\n        比如cap=1   结果 2 0次方 1\n        cap=2  2\n        cap=3 4\n        cap=9  16\n        分析下等于9\n        cap - 1  第一步结果8\n        00000000000000000000000000001000    8\n        00000000000000000000000000000100    右移1位 \n        \n        00000000000000000000000000001100    或运算 结果\n        00000000000000000000000000000011    右移2位\n        00000000000000000000000000001111    或运算 结果\n                                            \n        00000000000000000000000000001111    右移 4 8 16没用全是0结果还是这个15\n        最终 +1   16\n        \n        分析下等于大点 12345678\n        00000000101111000110000101001110  12345678\n        00000000101111000110000101001101  -1结果   12345677\n        00000000010111100011000010100110  右移1位 \n        \n        00000000111111100111000111101111  或运算 结果\n        00000000001111111001110001111011  右移2位\n        \n        00000000111111111111110111111111  差不多了在移0就没了都是1了，+1不是肯定是2的倍数了\n        \n        再说开始-1原因这是为了防止，cap已经是2的幂。\n        如果cap已经是2的幂， 又没有执行这个减1操作，则执行完后面的几条无符号右移操作之后，返回的capacity将是这个cap的2倍。如果不懂，要看完后面的几个无符号右移之后再回来看看\n```\n2.HashMap数组结构为什么用2的倍数\n高速的索引计算，使用HashMap肯定是冲突越少越好，就要求分部均匀，最好的用取模 h % length，但是近一步如果用2的幂h & (length - 1) == h % length 是等价的，效率缺差却别非常大\n综合衡量用空间换了时间，且是值得的\n\n3.线程安全问题\n线程不安全，就put来看全程没考虑线程问题，肯定不安全，现在随便并发一下resize会混乱吧，put链表，红黑树挂载基本都会出问题","source":"_posts/HashMap源码篇.md","raw":"---\ntitle: HashMap源码篇\ndate: 2019-03-04 12:52:46\ncategories: 源码解读\ncatalogue: java\ntags: [HashMap]\n---\n<font color=\"red\">本文转载自 https://www.cnblogs.com/zhaojj/p/7805376.html<font>\n#### 目的：\n单纯分析和学习hashmap的实现，不多说与Hashtable、ConcurrentHashMap等的区别。\n基于 jdk1.8\n\n在面试中有些水平的公司比较喜欢问HashMap原理，其中涉及的点比较多，而且大多能形成连环炮形式的问题。\n\n一般连环炮，一环不知道后面试官也就不问了，但是低层连环没连上，恭喜扣分是大大的，连到比较深的时候，说不知道还好点，比如：\n\n关于集合的\n1.1Hashmap是不是有序的？   不是继续\n\n1.2有没有有顺序的Map？     TreeMap  LinkedHashMap\n\n1.3它们是怎么来保证顺序的？   一般都要说到其源码，要不说不清为么有序\n\n1.4答两个有序或以上的 继续  你觉得它们有序的区别，那个比较好，在什么场景用哪个好？\n\n1.4答一个也可以问上面的场景  继续\n\n1.5你觉得有没有更好或者更高效的实现方式？有\n\n1.6 答有  这个时候说起来可能就要跑到底层数据结构上去了\n\n数据结构继续衍生 到 算法等等。。。\n\n就这一个遇到大佬问你，能把很多人连到怀疑人生\n<!--more-->\n\n2.关于hash的\n\n1.1  hashmap基本的节点结构？  Node  键值对\n\n1.2  键是什么样的，我用字符串a那键就是a嘛？   不是会进行hash\n\n1.3  如何hash的  这样hash有什么好处？   源码hashmap的hash算法\n\n1.4  Hash在java中主要作用是什么？\n\n1.5  Hashcode  equal相关   需要同时重写？原因？\n\n1.6  equal引出的对象地址、string带有字符串缓冲区、字符串常量池\n\n等等。。。\n\n3.关于线程安全问题、到concurrent包等\n\n前面说这些就是想说，hashmap中用到的东西很多，深入学习和理解对每个想晋升的程序员来说基本是必须，同时由它引出的对比，也是无限多，有很大的必要学习。\n\n#### HashMap类加载\n\n1.只有一些静态属性会进行赋值，具体每个值什么用，暂时不管\n\n```\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n\nstatic final int TREEIFY_THRESHOLD = 8;\n\nstatic final int UNTREEIFY_THRESHOLD = 6;\n\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n```\n\n#### 开始使用，第一步我们肯定是初始化方法，先从默认的构造方法开始学习\n\n```\npublic HashMap() {\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n    }\n1.AbstractMap父类，构造方法也没干事不谈\n2.只是赋值loadFactor 0.75f 没干别的事\n3.static final float DEFAULT_LOAD_FACTOR = 0.75f;\n4.loadFactor属性 作用先放着后面用到再看\n5.没干别的事了\n```\n#### 一般我们的使用第二步就是put了\n先看常用的put键值对，这个学完了，那么其他的put方法就没什么问题了，比如putAll、putIfAbsent、putMapEntries\n\n同时put弄明白了 取值就是一个反向就简单了\n\n```\npublic V put(K key, V value) {\n  return putVal(hash(key), key, value, false, true);\n}\n```\n\n1.先对key进行hash计算，学一下\n\n```\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n1.1 看出key是可以空的  hash为0\n1.2 (h = key.hashCode()) ^ (h >>> 16)   第一步取key的hashcode值  关于更底层的hashcode是什么 有兴趣再看\n    h ^ (h >>> 16)  第二步 高位参与运算\n这个hash值的重要性就不说了，这里这么干是出于性能考虑，底层的移位和异或运算肯定比加减乘除取模等效率好 \nhashcode是32位的，无符号右移16位，那生成的就是16位0加原高位的16位值， 就是对半了，异或计算也就变成了高16位和低16位进行异或，\n原高16位不变。这么干主要用于当hashmap 数组比较小的时候所有bit都参与运算了，防止hash冲突太大，\n所谓hash冲突是指不同的key计算出的hash是一样的，比如a和97，这个肯定是存在的没毛病\n```\n2.putVal \n\n```\n  /**\n     * Implements Map.put and related methods\n     *\n     * @param hash hash for key\n     * @param key the key\n     * @param value the value to put\n     * @param onlyIfAbsent if true, don't change existing value   相同key是不是覆盖值\n     * @param evict if false, the table is in creation mode.    在hashmap中没用\n     * @return previous value, or null if none\n     */\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        else {\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n    2.1 执行顺序\n        第一句  Node<K,V>[] tab; Node<K,V> p; int n, i; 申明变量\n            Node是啥,学习一下：\n                static class Node<K,V> implements Map.Entry<K,V> {\n                    final int hash;\n                    final K key;\n                    V value;\n                    Node<K,V> next;\n\n                    Node(int hash, K key, V value, Node<K,V> next) {\n                        this.hash = hash;\n                        this.key = key;\n                        this.value = value;\n                        this.next = next;\n                    }\n\n                    public final K getKey()        { return key; }\n                    public final V getValue()      { return value; }\n                    public final String toString() { return key + \"=\" + value; }\n\n                    public final int hashCode() {\n                        return Objects.hashCode(key) ^ Objects.hashCode(value);\n                    }\n\n                    public final V setValue(V newValue) {\n                        V oldValue = value;\n                        value = newValue;\n                        return oldValue;\n                    }\n\n                    public final boolean equals(Object o) {\n                        if (o == this)\n                            return true;\n                        if (o instanceof Map.Entry) {\n                            Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n                            if (Objects.equals(key, e.getKey()) &&\n                                Objects.equals(value, e.getValue()))\n                                return true;\n                        }\n                        return false;\n                    }\n                }\n            是内部的一个静态类，看看就明白了，明显是一个带有3个值，hash、key、value和另一个Node对象引用的HashMap子元素结构，即我们装的每个键值对就用一个Node对象存放\n            \n        第二句 if ((tab = table) == null || (n = tab.length) == 0) 这句\n            tab = table赋值，table现在是null的，so n = tab.length不运行了 运行这个if的代码块\n        第三句 n = (tab = resize()).length;   从下面的执行知道 n=16\n            调用resize()，返回Node数组，这个resize是一个非常重要的方法，我们就依现在的对象状态去看这个方法，不带入其他状态，认真研究学习下\n                final Node<K,V>[] resize() {\n                    Node<K,V>[] oldTab = table;\n                    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n                    int oldThr = threshold;\n                    int newCap, newThr = 0;\n                    if (oldCap > 0) {\n                        if (oldCap >= MAXIMUM_CAPACITY) {\n                            threshold = Integer.MAX_VALUE;\n                            return oldTab;\n                        }\n                        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n                            newThr = oldThr << 1; // double threshold\n                    }\n                    else if (oldThr > 0) // initial capacity was placed in threshold\n                        newCap = oldThr;\n                    else {               // zero initial threshold signifies using defaults\n                        newCap = DEFAULT_INITIAL_CAPACITY;\n                        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n                    }\n                    if (newThr == 0) {\n                        float ft = (float)newCap * loadFactor;\n                        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                                  (int)ft : Integer.MAX_VALUE);\n                    }\n                    threshold = newThr;\n                    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n                        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n                    table = newTab;\n                    if (oldTab != null) {\n                        for (int j = 0; j < oldCap; ++j) {\n                            Node<K,V> e;\n                            if ((e = oldTab[j]) != null) {\n                                oldTab[j] = null;\n                                if (e.next == null)\n                                    newTab[e.hash & (newCap - 1)] = e;\n                                else if (e instanceof TreeNode)\n                                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                                else { // preserve order\n                                    Node<K,V> loHead = null, loTail = null;\n                                    Node<K,V> hiHead = null, hiTail = null;\n                                    Node<K,V> next;\n                                    do {\n                                        next = e.next;\n                                        if ((e.hash & oldCap) == 0) {\n                                            if (loTail == null)\n                                                loHead = e;\n                                            else\n                                                loTail.next = e;\n                                            loTail = e;\n                                        }\n                                        else {\n                                            if (hiTail == null)\n                                                hiHead = e;\n                                            else\n                                                hiTail.next = e;\n                                            hiTail = e;\n                                        }\n                                    } while ((e = next) != null);\n                                    if (loTail != null) {\n                                        loTail.next = null;\n                                        newTab[j] = loHead;\n                                    }\n                                    if (hiTail != null) {\n                                        hiTail.next = null;\n                                        newTab[j + oldCap] = hiHead;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    return newTab;\n                }\n            resize  1.Node<K,V>[] oldTab = table; 在上面知道table是null的，so  oldTab也是null\n                    2.int oldCap = (oldTab == null) ? 0 : oldTab.length;   oldCap=0\n                    3.int oldThr = threshold;   threshold我们没赋值过，int初始0 ， oldThr=threshold=0\n                    4.int newCap, newThr = 0;  不谈\n                    5.if (oldCap > 0) {    oldCap=0  if不运行\n                    6.else if (oldThr > 0)  oldThr=0  if也不运行\n                    7.else {\n                            newCap = DEFAULT_INITIAL_CAPACITY;       DEFAULT_INITIAL_CAPACITY静态成员变量，初始 static final int DEFAULT_INITIAL_CAPACITY = 1 << 4     so newCap=16\n                            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);   static final float DEFAULT_LOAD_FACTOR = 0.75f;   0.75*16=12   newThr=12\n                        }\n                    8.  if (newThr == 0) {     newThr=12 if不运行\n                    9.  threshold = newThr;    threshold = newThr=12\n                    10. Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap]   申明一个16个大小的Node数组\n                    11. table = newTab;   看出来了吧，table是成员变量，也就表明，HashMap初始数据结构是一个16的Node数组\n                    12.  if (oldTab != null) {   oldTab是1中赋值的null，if不运行\n                    13.  return newTab;  返回16大小的node数组\n                总结，这一波调用是初次调用其实没干别的事，就是定义了基本的数据结构是16个Node数组，但是这个方法不简单，因为一些if没走\n                \n        第四句     if ((p = tab[i = (n - 1) & hash]) == null)\n            n=16   15&hash 结果肯定是0-15，这里就看出，这是在计算一个key应该在整个数据结构16的数组中的索引了，并赋值给i变量，后面不管整体结构n变多大，这种计算key所在的索引是非常棒的设计。\n            现在的状态是初始的 肯定是null的吧  if运行\n            \n        第五句 tab[i] = newNode(hash, key, value, null); new一个节点Node，放在数组里，i是第四句计算的索引\n        第六句 else {  不运行\n        第七句  ++modCount;   transient int modCount; 根据注释可以看出，这个是记录数据结构变动次数的，put值肯定是变了的\n        第八句  if (++size > threshold)  size=1  threshold在调用resize时赋值12   if不运行\n        第九句 afterNodeInsertion(evict);  没干事\n        第十句   return null; 不谈\n\n```\n3.putVal 再回头详走,第一遍干了很多初始化的事有些东西还没研究到\n\n```\n  final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        else {\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n    \n        第一句  Node<K,V>[] tab; Node<K,V> p; int n, i; 申明变量不谈\n        第二句 if ((tab = table) == null || (n = tab.length) == 0) 这句\n            tab = table赋值，table现在是16数组 n=16  if不运行\n        第三句 if ((p = tab[i = (n - 1) & hash]) == null) \n            再看就知道了判断当前存的key计算出的索引位置是不是已经存过值了\n            没存过就新Node存  和上面一遍一样   我们当已经有值了\n            有值其实就意味着发生hash冲突了  比如key分别是a和97 hashCode都是97 冲突\n            因此这次我们主要看下一个else里面HashMap是怎么处理冲突的\n        第四句     else中内容  即冲突处理\n            p是冲突时数组该索引位置的元素\n                1. p.hash == hash &&((k = p.key) == key || (key != null && key.equals(k)))\n                    判断新元素hash和key是不是都和p相同，相同表示存了一样的key\n                    直接赋值给e\n                2. p instanceof TreeNode（红黑树，具体的红黑树算法这里就不详细写了，有兴趣可以去学习）\n                    怎么猛然来个红黑树，再3里说\n                    判断原来元素是不是 TreeNode 类型\n                    TreeNode一样是静态内部类，再看看就是红黑树的节点，因此这个地方用到了红黑树\n                    putTreeVal 向红黑树中添加元素\n                    内部实现，存在相同key就返回赋值给e  不存在就添加并返回null 源码就是红黑树算法\n                3.key不同也不是红黑树\n                     if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                    }\n                    先不看再里面的那个if，这个一看就知道了吧，明显的链表啊，而且数据里的这个元素是链表头\n                    整个循环，明显是在从头开始遍历链表，找到相同key或链表找完了新元素挂链表最后\n                    \n                    但在其中还有这么个if\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                        这是在链表找完了，且新元素已经挂在链表最后了有的一个判断\n                        判断循环次数，其实就是链表长度，长度超过TREEIFY_THRESHOLD 默认8则运行treeifyBin(tab, hash);\n                    就是这个方法把链表变成红黑树了，具体方法源码不谈了，学红黑树就可以了\n            \n            最后判断e是不是空，上面的冲突方案看出e不是空就是表示有相同的key进行value覆盖就可以，e空就是无相同key且完成了数据挂载\n            \n        \n        总结这次再走一遍putVal就是为了学习HashMap的冲突处理方案，也看出内存结构是数组、链表、红黑树组成的，红黑树是java8新引进，是基于性能的考虑，在冲突大时，红黑树算法会比链表综合表现更好\n```\n\n4.resize 再详走 putVal最后一段size>threshold  threshold初始12 ++size元素数量肯定会有超12个的时候，\n这里也就看出了threshold代表HashMap的容量，到上限就要扩容了，默认现在16数组，12元素上限\n\n```\n  1.Node<K,V>[] oldTab = table;  16大小\n        2.int oldCap = (oldTab == null) ? 0 : oldTab.length;   oldCap=16\n        3.int oldThr = threshold;     12\n        4.int newCap, newThr = 0;  不谈\n        5.if (oldCap > 0) {         oldCap=16运行  oldCap是整体结构数组大小\n                if (oldCap >= MAXIMUM_CAPACITY) {    判断数组大小是不是已经到上限1<<30\n                    threshold = Integer.MAX_VALUE;  到达上线 threshold 赋值最大值 然后返回 表示之后就不再干别的事了，随便存，随便hash冲突去，就这么大，无限增加红黑树节点了\n                    return oldTab;\n                }\n                else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                         oldCap >= DEFAULT_INITIAL_CAPACITY)   赋值newCap为2倍数组大小，判断如果扩充2倍有没到上限，且不扩充时容量是否大于默认的16\n                    newThr = oldThr << 1; // double threshold   满足则赋值  容量改为24\n            }\n            这段看出到threshold容量了就进行2倍扩容\n        6.if (newThr == 0) {    如果运行该if 0 表示5步中扩容2倍到上限或原数组大小小于16\n            float ft = (float)newCap * loadFactor;      newCap现在是2倍原大小的*0.75   2倍数组大小时的容量\n            newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);     判断2倍数组大小和2倍后的容量是不是都小于最高值，是则赋值新容量，不是就用整形最大值\n            }\n        7.  threshold = newThr;  把5 6两步算出的新容量赋值给HashMap  也说明要扩容了\n        8.   Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n            和后面的循环主要就是把原数组中的元素，一个一个添加到新数组中，转移的一个过程\n        \n    总结，这一波调用是了解HashMap的扩容方式，看下来就是2倍扩容直到上限\n```\n5.总结，到这put就比较详细了，也知道了基本结构是数组、链表、红黑树，链表到8个时转换成红黑树\n同时每次进行2倍扩容和数据转移，扩容是用新结构的那显然减少扩容次数会有更好的性能\n那就要求每次声明HashMap时最好是指定大小的\n\n#### 一些其他我们需要知道的\n1.指定大小的初始化\n\n```\n  public HashMap(int initialCapacity) {\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    }\n    public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }\n    第一个常用，第二个建议是不用，不去动0.75的这个容量比例，当然不绝对\n    这里tableSizeFor是一个很神奇的算法，我非常佩服的一个算法\n        static final int tableSizeFor(int cap) {\n            int n = cap - 1;\n            n |= n >>> 1;\n            n |= n >>> 2;\n            n |= n >>> 4;\n            n |= n >>> 8;\n            n |= n >>> 16;\n            return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n        }\n        这个方法是在找大于等于cap且最小2的幂\n        比如cap=1   结果 2 0次方 1\n        cap=2  2\n        cap=3 4\n        cap=9  16\n        分析下等于9\n        cap - 1  第一步结果8\n        00000000000000000000000000001000    8\n        00000000000000000000000000000100    右移1位 \n        \n        00000000000000000000000000001100    或运算 结果\n        00000000000000000000000000000011    右移2位\n        00000000000000000000000000001111    或运算 结果\n                                            \n        00000000000000000000000000001111    右移 4 8 16没用全是0结果还是这个15\n        最终 +1   16\n        \n        分析下等于大点 12345678\n        00000000101111000110000101001110  12345678\n        00000000101111000110000101001101  -1结果   12345677\n        00000000010111100011000010100110  右移1位 \n        \n        00000000111111100111000111101111  或运算 结果\n        00000000001111111001110001111011  右移2位\n        \n        00000000111111111111110111111111  差不多了在移0就没了都是1了，+1不是肯定是2的倍数了\n        \n        再说开始-1原因这是为了防止，cap已经是2的幂。\n        如果cap已经是2的幂， 又没有执行这个减1操作，则执行完后面的几条无符号右移操作之后，返回的capacity将是这个cap的2倍。如果不懂，要看完后面的几个无符号右移之后再回来看看\n```\n2.HashMap数组结构为什么用2的倍数\n高速的索引计算，使用HashMap肯定是冲突越少越好，就要求分部均匀，最好的用取模 h % length，但是近一步如果用2的幂h & (length - 1) == h % length 是等价的，效率缺差却别非常大\n综合衡量用空间换了时间，且是值得的\n\n3.线程安全问题\n线程不安全，就put来看全程没考虑线程问题，肯定不安全，现在随便并发一下resize会混乱吧，put链表，红黑树挂载基本都会出问题","slug":"HashMap源码篇","published":1,"updated":"2019-03-08T10:12:00.339Z","_id":"cjszwekxu000x5okb7uvxt28o","comments":1,"layout":"post","photos":[],"link":"","content":"<p><font color=\"red\">本文转载自 <a href=\"https://www.cnblogs.com/zhaojj/p/7805376.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhaojj/p/7805376.html</a><font></font></font></p>\n<h4 id=\"目的：\"><a href=\"#目的：\" class=\"headerlink\" title=\"目的：\"></a>目的：</h4><p>单纯分析和学习hashmap的实现，不多说与Hashtable、ConcurrentHashMap等的区别。<br>基于 jdk1.8</p>\n<p>在面试中有些水平的公司比较喜欢问HashMap原理，其中涉及的点比较多，而且大多能形成连环炮形式的问题。</p>\n<p>一般连环炮，一环不知道后面试官也就不问了，但是低层连环没连上，恭喜扣分是大大的，连到比较深的时候，说不知道还好点，比如：</p>\n<p>关于集合的<br>1.1Hashmap是不是有序的？   不是继续</p>\n<p>1.2有没有有顺序的Map？     TreeMap  LinkedHashMap</p>\n<p>1.3它们是怎么来保证顺序的？   一般都要说到其源码，要不说不清为么有序</p>\n<p>1.4答两个有序或以上的 继续  你觉得它们有序的区别，那个比较好，在什么场景用哪个好？</p>\n<p>1.4答一个也可以问上面的场景  继续</p>\n<p>1.5你觉得有没有更好或者更高效的实现方式？有</p>\n<p>1.6 答有  这个时候说起来可能就要跑到底层数据结构上去了</p>\n<p>数据结构继续衍生 到 算法等等。。。</p>\n<p>就这一个遇到大佬问你，能把很多人连到怀疑人生<br><a id=\"more\"></a></p>\n<p>2.关于hash的</p>\n<p>1.1  hashmap基本的节点结构？  Node  键值对</p>\n<p>1.2  键是什么样的，我用字符串a那键就是a嘛？   不是会进行hash</p>\n<p>1.3  如何hash的  这样hash有什么好处？   源码hashmap的hash算法</p>\n<p>1.4  Hash在java中主要作用是什么？</p>\n<p>1.5  Hashcode  equal相关   需要同时重写？原因？</p>\n<p>1.6  equal引出的对象地址、string带有字符串缓冲区、字符串常量池</p>\n<p>等等。。。</p>\n<p>3.关于线程安全问题、到concurrent包等</p>\n<p>前面说这些就是想说，hashmap中用到的东西很多，深入学习和理解对每个想晋升的程序员来说基本是必须，同时由它引出的对比，也是无限多，有很大的必要学习。</p>\n<h4 id=\"HashMap类加载\"><a href=\"#HashMap类加载\" class=\"headerlink\" title=\"HashMap类加载\"></a>HashMap类加载</h4><p>1.只有一些静态属性会进行赋值，具体每个值什么用，暂时不管</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</span><br><span class=\"line\"></span><br><span class=\"line\">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class=\"line\"></span><br><span class=\"line\">static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class=\"line\"></span><br><span class=\"line\">static final int TREEIFY_THRESHOLD = 8;</span><br><span class=\"line\"></span><br><span class=\"line\">static final int UNTREEIFY_THRESHOLD = 6;</span><br><span class=\"line\"></span><br><span class=\"line\">static final int MIN_TREEIFY_CAPACITY = 64;</span><br></pre></td></tr></table></figure>\n<h4 id=\"开始使用，第一步我们肯定是初始化方法，先从默认的构造方法开始学习\"><a href=\"#开始使用，第一步我们肯定是初始化方法，先从默认的构造方法开始学习\" class=\"headerlink\" title=\"开始使用，第一步我们肯定是初始化方法，先从默认的构造方法开始学习\"></a>开始使用，第一步我们肯定是初始化方法，先从默认的构造方法开始学习</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public HashMap() &#123;</span><br><span class=\"line\">        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">1.AbstractMap父类，构造方法也没干事不谈</span><br><span class=\"line\">2.只是赋值loadFactor 0.75f 没干别的事</span><br><span class=\"line\">3.static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class=\"line\">4.loadFactor属性 作用先放着后面用到再看</span><br><span class=\"line\">5.没干别的事了</span><br></pre></td></tr></table></figure>\n<h4 id=\"一般我们的使用第二步就是put了\"><a href=\"#一般我们的使用第二步就是put了\" class=\"headerlink\" title=\"一般我们的使用第二步就是put了\"></a>一般我们的使用第二步就是put了</h4><p>先看常用的put键值对，这个学完了，那么其他的put方法就没什么问题了，比如putAll、putIfAbsent、putMapEntries</p>\n<p>同时put弄明白了 取值就是一个反向就简单了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public V put(K key, V value) &#123;</span><br><span class=\"line\">  return putVal(hash(key), key, value, false, true);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.先对key进行hash计算，学一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int hash(Object key) &#123;</span><br><span class=\"line\">    int h;</span><br><span class=\"line\">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">1.1 看出key是可以空的  hash为0</span><br><span class=\"line\">1.2 (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)   第一步取key的hashcode值  关于更底层的hashcode是什么 有兴趣再看</span><br><span class=\"line\">    h ^ (h &gt;&gt;&gt; 16)  第二步 高位参与运算</span><br><span class=\"line\">这个hash值的重要性就不说了，这里这么干是出于性能考虑，底层的移位和异或运算肯定比加减乘除取模等效率好 </span><br><span class=\"line\">hashcode是32位的，无符号右移16位，那生成的就是16位0加原高位的16位值， 就是对半了，异或计算也就变成了高16位和低16位进行异或，</span><br><span class=\"line\">原高16位不变。这么干主要用于当hashmap 数组比较小的时候所有bit都参与运算了，防止hash冲突太大，</span><br><span class=\"line\">所谓hash冲突是指不同的key计算出的hash是一样的，比如a和97，这个肯定是存在的没毛病</span><br></pre></td></tr></table></figure>\n<p>2.putVal </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">   * Implements Map.put and related methods</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param hash hash for key</span><br><span class=\"line\">   * @param key the key</span><br><span class=\"line\">   * @param value the value to put</span><br><span class=\"line\">   * @param onlyIfAbsent if true, don&apos;t change existing value   相同key是不是覆盖值</span><br><span class=\"line\">   * @param evict if false, the table is in creation mode.    在hashmap中没用</span><br><span class=\"line\">   * @return previous value, or null if none</span><br><span class=\"line\">   */</span><br><span class=\"line\">  final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class=\"line\">                 boolean evict) &#123;</span><br><span class=\"line\">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class=\"line\">      if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class=\"line\">          n = (tab = resize()).length;</span><br><span class=\"line\">      if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class=\"line\">          tab[i] = newNode(hash, key, value, null);</span><br><span class=\"line\">      else &#123;</span><br><span class=\"line\">          Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">          if (p.hash == hash &amp;&amp;</span><br><span class=\"line\">              ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">              e = p;</span><br><span class=\"line\">          else if (p instanceof TreeNode)</span><br><span class=\"line\">              e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class=\"line\">          else &#123;</span><br><span class=\"line\">              for (int binCount = 0; ; ++binCount) &#123;</span><br><span class=\"line\">                  if ((e = p.next) == null) &#123;</span><br><span class=\"line\">                      p.next = newNode(hash, key, value, null);</span><br><span class=\"line\">                      if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class=\"line\">                          treeifyBin(tab, hash);</span><br><span class=\"line\">                      break;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  if (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                      ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                      break;</span><br><span class=\"line\">                  p = e;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (e != null) &#123; // existing mapping for key</span><br><span class=\"line\">              V oldValue = e.value;</span><br><span class=\"line\">              if (!onlyIfAbsent || oldValue == null)</span><br><span class=\"line\">                  e.value = value;</span><br><span class=\"line\">              afterNodeAccess(e);</span><br><span class=\"line\">              return oldValue;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ++modCount;</span><br><span class=\"line\">      if (++size &gt; threshold)</span><br><span class=\"line\">          resize();</span><br><span class=\"line\">      afterNodeInsertion(evict);</span><br><span class=\"line\">      return null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  2.1 执行顺序</span><br><span class=\"line\">      第一句  Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; 申明变量</span><br><span class=\"line\">          Node是啥,学习一下：</span><br><span class=\"line\">              static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">                  final int hash;</span><br><span class=\"line\">                  final K key;</span><br><span class=\"line\">                  V value;</span><br><span class=\"line\">                  Node&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">                  Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">                      this.hash = hash;</span><br><span class=\"line\">                      this.key = key;</span><br><span class=\"line\">                      this.value = value;</span><br><span class=\"line\">                      this.next = next;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  public final K getKey()        &#123; return key; &#125;</span><br><span class=\"line\">                  public final V getValue()      &#123; return value; &#125;</span><br><span class=\"line\">                  public final String toString() &#123; return key + &quot;=&quot; + value; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  public final int hashCode() &#123;</span><br><span class=\"line\">                      return Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  public final V setValue(V newValue) &#123;</span><br><span class=\"line\">                      V oldValue = value;</span><br><span class=\"line\">                      value = newValue;</span><br><span class=\"line\">                      return oldValue;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  public final boolean equals(Object o) &#123;</span><br><span class=\"line\">                      if (o == this)</span><br><span class=\"line\">                          return true;</span><br><span class=\"line\">                      if (o instanceof Map.Entry) &#123;</span><br><span class=\"line\">                          Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class=\"line\">                          if (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class=\"line\">                              Objects.equals(value, e.getValue()))</span><br><span class=\"line\">                              return true;</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                      return false;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          是内部的一个静态类，看看就明白了，明显是一个带有3个值，hash、key、value和另一个Node对象引用的HashMap子元素结构，即我们装的每个键值对就用一个Node对象存放</span><br><span class=\"line\">          </span><br><span class=\"line\">      第二句 if ((tab = table) == null || (n = tab.length) == 0) 这句</span><br><span class=\"line\">          tab = table赋值，table现在是null的，so n = tab.length不运行了 运行这个if的代码块</span><br><span class=\"line\">      第三句 n = (tab = resize()).length;   从下面的执行知道 n=16</span><br><span class=\"line\">          调用resize()，返回Node数组，这个resize是一个非常重要的方法，我们就依现在的对象状态去看这个方法，不带入其他状态，认真研究学习下</span><br><span class=\"line\">              final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">                  Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">                  int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class=\"line\">                  int oldThr = threshold;</span><br><span class=\"line\">                  int newCap, newThr = 0;</span><br><span class=\"line\">                  if (oldCap &gt; 0) &#123;</span><br><span class=\"line\">                      if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">                          threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">                          return oldTab;</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                      else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                               oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">                          newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  else if (oldThr &gt; 0) // initial capacity was placed in threshold</span><br><span class=\"line\">                      newCap = oldThr;</span><br><span class=\"line\">                  else &#123;               // zero initial threshold signifies using defaults</span><br><span class=\"line\">                      newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">                      newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  if (newThr == 0) &#123;</span><br><span class=\"line\">                      float ft = (float)newCap * loadFactor;</span><br><span class=\"line\">                      newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                                (int)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  threshold = newThr;</span><br><span class=\"line\">                  @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class=\"line\">                      Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class=\"line\">                  table = newTab;</span><br><span class=\"line\">                  if (oldTab != null) &#123;</span><br><span class=\"line\">                      for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">                          Node&lt;K,V&gt; e;</span><br><span class=\"line\">                          if ((e = oldTab[j]) != null) &#123;</span><br><span class=\"line\">                              oldTab[j] = null;</span><br><span class=\"line\">                              if (e.next == null)</span><br><span class=\"line\">                                  newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class=\"line\">                              else if (e instanceof TreeNode)</span><br><span class=\"line\">                                  ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class=\"line\">                              else &#123; // preserve order</span><br><span class=\"line\">                                  Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class=\"line\">                                  Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class=\"line\">                                  Node&lt;K,V&gt; next;</span><br><span class=\"line\">                                  do &#123;</span><br><span class=\"line\">                                      next = e.next;</span><br><span class=\"line\">                                      if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class=\"line\">                                          if (loTail == null)</span><br><span class=\"line\">                                              loHead = e;</span><br><span class=\"line\">                                          else</span><br><span class=\"line\">                                              loTail.next = e;</span><br><span class=\"line\">                                          loTail = e;</span><br><span class=\"line\">                                      &#125;</span><br><span class=\"line\">                                      else &#123;</span><br><span class=\"line\">                                          if (hiTail == null)</span><br><span class=\"line\">                                              hiHead = e;</span><br><span class=\"line\">                                          else</span><br><span class=\"line\">                                              hiTail.next = e;</span><br><span class=\"line\">                                          hiTail = e;</span><br><span class=\"line\">                                      &#125;</span><br><span class=\"line\">                                  &#125; while ((e = next) != null);</span><br><span class=\"line\">                                  if (loTail != null) &#123;</span><br><span class=\"line\">                                      loTail.next = null;</span><br><span class=\"line\">                                      newTab[j] = loHead;</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                                  if (hiTail != null) &#123;</span><br><span class=\"line\">                                      hiTail.next = null;</span><br><span class=\"line\">                                      newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                              &#125;</span><br><span class=\"line\">                          &#125;</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  return newTab;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          resize  1.Node&lt;K,V&gt;[] oldTab = table; 在上面知道table是null的，so  oldTab也是null</span><br><span class=\"line\">                  2.int oldCap = (oldTab == null) ? 0 : oldTab.length;   oldCap=0</span><br><span class=\"line\">                  3.int oldThr = threshold;   threshold我们没赋值过，int初始0 ， oldThr=threshold=0</span><br><span class=\"line\">                  4.int newCap, newThr = 0;  不谈</span><br><span class=\"line\">                  5.if (oldCap &gt; 0) &#123;    oldCap=0  if不运行</span><br><span class=\"line\">                  6.else if (oldThr &gt; 0)  oldThr=0  if也不运行</span><br><span class=\"line\">                  7.else &#123;</span><br><span class=\"line\">                          newCap = DEFAULT_INITIAL_CAPACITY;       DEFAULT_INITIAL_CAPACITY静态成员变量，初始 static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4     so newCap=16</span><br><span class=\"line\">                          newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);   static final float DEFAULT_LOAD_FACTOR = 0.75f;   0.75*16=12   newThr=12</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  8.  if (newThr == 0) &#123;     newThr=12 if不运行</span><br><span class=\"line\">                  9.  threshold = newThr;    threshold = newThr=12</span><br><span class=\"line\">                  10. Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap]   申明一个16个大小的Node数组</span><br><span class=\"line\">                  11. table = newTab;   看出来了吧，table是成员变量，也就表明，HashMap初始数据结构是一个16的Node数组</span><br><span class=\"line\">                  12.  if (oldTab != null) &#123;   oldTab是1中赋值的null，if不运行</span><br><span class=\"line\">                  13.  return newTab;  返回16大小的node数组</span><br><span class=\"line\">              总结，这一波调用是初次调用其实没干别的事，就是定义了基本的数据结构是16个Node数组，但是这个方法不简单，因为一些if没走</span><br><span class=\"line\">              </span><br><span class=\"line\">      第四句     if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class=\"line\">          n=16   15&amp;hash 结果肯定是0-15，这里就看出，这是在计算一个key应该在整个数据结构16的数组中的索引了，并赋值给i变量，后面不管整体结构n变多大，这种计算key所在的索引是非常棒的设计。</span><br><span class=\"line\">          现在的状态是初始的 肯定是null的吧  if运行</span><br><span class=\"line\">          </span><br><span class=\"line\">      第五句 tab[i] = newNode(hash, key, value, null); new一个节点Node，放在数组里，i是第四句计算的索引</span><br><span class=\"line\">      第六句 else &#123;  不运行</span><br><span class=\"line\">      第七句  ++modCount;   transient int modCount; 根据注释可以看出，这个是记录数据结构变动次数的，put值肯定是变了的</span><br><span class=\"line\">      第八句  if (++size &gt; threshold)  size=1  threshold在调用resize时赋值12   if不运行</span><br><span class=\"line\">      第九句 afterNodeInsertion(evict);  没干事</span><br><span class=\"line\">      第十句   return null; 不谈</span><br></pre></td></tr></table></figure>\n<p>3.putVal 再回头详走,第一遍干了很多初始化的事有些东西还没研究到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class=\"line\">                 boolean evict) &#123;</span><br><span class=\"line\">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class=\"line\">      if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class=\"line\">          n = (tab = resize()).length;</span><br><span class=\"line\">      if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class=\"line\">          tab[i] = newNode(hash, key, value, null);</span><br><span class=\"line\">      else &#123;</span><br><span class=\"line\">          Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">          if (p.hash == hash &amp;&amp;</span><br><span class=\"line\">              ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">              e = p;</span><br><span class=\"line\">          else if (p instanceof TreeNode)</span><br><span class=\"line\">              e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class=\"line\">          else &#123;</span><br><span class=\"line\">              for (int binCount = 0; ; ++binCount) &#123;</span><br><span class=\"line\">                  if ((e = p.next) == null) &#123;</span><br><span class=\"line\">                      p.next = newNode(hash, key, value, null);</span><br><span class=\"line\">                      if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class=\"line\">                          treeifyBin(tab, hash);</span><br><span class=\"line\">                      break;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  if (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                      ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                      break;</span><br><span class=\"line\">                  p = e;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (e != null) &#123; // existing mapping for key</span><br><span class=\"line\">              V oldValue = e.value;</span><br><span class=\"line\">              if (!onlyIfAbsent || oldValue == null)</span><br><span class=\"line\">                  e.value = value;</span><br><span class=\"line\">              afterNodeAccess(e);</span><br><span class=\"line\">              return oldValue;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ++modCount;</span><br><span class=\"line\">      if (++size &gt; threshold)</span><br><span class=\"line\">          resize();</span><br><span class=\"line\">      afterNodeInsertion(evict);</span><br><span class=\"line\">      return null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      第一句  Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; 申明变量不谈</span><br><span class=\"line\">      第二句 if ((tab = table) == null || (n = tab.length) == 0) 这句</span><br><span class=\"line\">          tab = table赋值，table现在是16数组 n=16  if不运行</span><br><span class=\"line\">      第三句 if ((p = tab[i = (n - 1) &amp; hash]) == null) </span><br><span class=\"line\">          再看就知道了判断当前存的key计算出的索引位置是不是已经存过值了</span><br><span class=\"line\">          没存过就新Node存  和上面一遍一样   我们当已经有值了</span><br><span class=\"line\">          有值其实就意味着发生hash冲突了  比如key分别是a和97 hashCode都是97 冲突</span><br><span class=\"line\">          因此这次我们主要看下一个else里面HashMap是怎么处理冲突的</span><br><span class=\"line\">      第四句     else中内容  即冲突处理</span><br><span class=\"line\">          p是冲突时数组该索引位置的元素</span><br><span class=\"line\">              1. p.hash == hash &amp;&amp;((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))</span><br><span class=\"line\">                  判断新元素hash和key是不是都和p相同，相同表示存了一样的key</span><br><span class=\"line\">                  直接赋值给e</span><br><span class=\"line\">              2. p instanceof TreeNode（红黑树，具体的红黑树算法这里就不详细写了，有兴趣可以去学习）</span><br><span class=\"line\">                  怎么猛然来个红黑树，再3里说</span><br><span class=\"line\">                  判断原来元素是不是 TreeNode 类型</span><br><span class=\"line\">                  TreeNode一样是静态内部类，再看看就是红黑树的节点，因此这个地方用到了红黑树</span><br><span class=\"line\">                  putTreeVal 向红黑树中添加元素</span><br><span class=\"line\">                  内部实现，存在相同key就返回赋值给e  不存在就添加并返回null 源码就是红黑树算法</span><br><span class=\"line\">              3.key不同也不是红黑树</span><br><span class=\"line\">                   if ((e = p.next) == null) &#123;</span><br><span class=\"line\">                      p.next = newNode(hash, key, value, null);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  先不看再里面的那个if，这个一看就知道了吧，明显的链表啊，而且数据里的这个元素是链表头</span><br><span class=\"line\">                  整个循环，明显是在从头开始遍历链表，找到相同key或链表找完了新元素挂链表最后</span><br><span class=\"line\">                  </span><br><span class=\"line\">                  但在其中还有这么个if</span><br><span class=\"line\">                      if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class=\"line\">                          treeifyBin(tab, hash);</span><br><span class=\"line\">                      break;</span><br><span class=\"line\">                      这是在链表找完了，且新元素已经挂在链表最后了有的一个判断</span><br><span class=\"line\">                      判断循环次数，其实就是链表长度，长度超过TREEIFY_THRESHOLD 默认8则运行treeifyBin(tab, hash);</span><br><span class=\"line\">                  就是这个方法把链表变成红黑树了，具体方法源码不谈了，学红黑树就可以了</span><br><span class=\"line\">          </span><br><span class=\"line\">          最后判断e是不是空，上面的冲突方案看出e不是空就是表示有相同的key进行value覆盖就可以，e空就是无相同key且完成了数据挂载</span><br><span class=\"line\">          </span><br><span class=\"line\">      </span><br><span class=\"line\">      总结这次再走一遍putVal就是为了学习HashMap的冲突处理方案，也看出内存结构是数组、链表、红黑树组成的，红黑树是java8新引进，是基于性能的考虑，在冲突大时，红黑树算法会比链表综合表现更好</span><br></pre></td></tr></table></figure>\n<p>4.resize 再详走 putVal最后一段size&gt;threshold  threshold初始12 ++size元素数量肯定会有超12个的时候，<br>这里也就看出了threshold代表HashMap的容量，到上限就要扩容了，默认现在16数组，12元素上限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Node&lt;K,V&gt;[] oldTab = table;  16大小</span><br><span class=\"line\">      2.int oldCap = (oldTab == null) ? 0 : oldTab.length;   oldCap=16</span><br><span class=\"line\">      3.int oldThr = threshold;     12</span><br><span class=\"line\">      4.int newCap, newThr = 0;  不谈</span><br><span class=\"line\">      5.if (oldCap &gt; 0) &#123;         oldCap=16运行  oldCap是整体结构数组大小</span><br><span class=\"line\">              if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;    判断数组大小是不是已经到上限1&lt;&lt;30</span><br><span class=\"line\">                  threshold = Integer.MAX_VALUE;  到达上线 threshold 赋值最大值 然后返回 表示之后就不再干别的事了，随便存，随便hash冲突去，就这么大，无限增加红黑树节点了</span><br><span class=\"line\">                  return oldTab;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                       oldCap &gt;= DEFAULT_INITIAL_CAPACITY)   赋值newCap为2倍数组大小，判断如果扩充2倍有没到上限，且不扩充时容量是否大于默认的16</span><br><span class=\"line\">                  newThr = oldThr &lt;&lt; 1; // double threshold   满足则赋值  容量改为24</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          这段看出到threshold容量了就进行2倍扩容</span><br><span class=\"line\">      6.if (newThr == 0) &#123;    如果运行该if 0 表示5步中扩容2倍到上限或原数组大小小于16</span><br><span class=\"line\">          float ft = (float)newCap * loadFactor;      newCap现在是2倍原大小的*0.75   2倍数组大小时的容量</span><br><span class=\"line\">          newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                    (int)ft : Integer.MAX_VALUE);     判断2倍数组大小和2倍后的容量是不是都小于最高值，是则赋值新容量，不是就用整形最大值</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      7.  threshold = newThr;  把5 6两步算出的新容量赋值给HashMap  也说明要扩容了</span><br><span class=\"line\">      8.   Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class=\"line\">          和后面的循环主要就是把原数组中的元素，一个一个添加到新数组中，转移的一个过程</span><br><span class=\"line\">      </span><br><span class=\"line\">  总结，这一波调用是了解HashMap的扩容方式，看下来就是2倍扩容直到上限</span><br></pre></td></tr></table></figure>\n<p>5.总结，到这put就比较详细了，也知道了基本结构是数组、链表、红黑树，链表到8个时转换成红黑树<br>同时每次进行2倍扩容和数据转移，扩容是用新结构的那显然减少扩容次数会有更好的性能<br>那就要求每次声明HashMap时最好是指定大小的</p>\n<h4 id=\"一些其他我们需要知道的\"><a href=\"#一些其他我们需要知道的\" class=\"headerlink\" title=\"一些其他我们需要知道的\"></a>一些其他我们需要知道的</h4><p>1.指定大小的初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public HashMap(int initialCapacity) &#123;</span><br><span class=\"line\">      this(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public HashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class=\"line\">      if (initialCapacity &lt; 0)</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +</span><br><span class=\"line\">                                             initialCapacity);</span><br><span class=\"line\">      if (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">          initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">      if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +</span><br><span class=\"line\">                                             loadFactor);</span><br><span class=\"line\">      this.loadFactor = loadFactor;</span><br><span class=\"line\">      this.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  第一个常用，第二个建议是不用，不去动0.75的这个容量比例，当然不绝对</span><br><span class=\"line\">  这里tableSizeFor是一个很神奇的算法，我非常佩服的一个算法</span><br><span class=\"line\">      static final int tableSizeFor(int cap) &#123;</span><br><span class=\"line\">          int n = cap - 1;</span><br><span class=\"line\">          n |= n &gt;&gt;&gt; 1;</span><br><span class=\"line\">          n |= n &gt;&gt;&gt; 2;</span><br><span class=\"line\">          n |= n &gt;&gt;&gt; 4;</span><br><span class=\"line\">          n |= n &gt;&gt;&gt; 8;</span><br><span class=\"line\">          n |= n &gt;&gt;&gt; 16;</span><br><span class=\"line\">          return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      这个方法是在找大于等于cap且最小2的幂</span><br><span class=\"line\">      比如cap=1   结果 2 0次方 1</span><br><span class=\"line\">      cap=2  2</span><br><span class=\"line\">      cap=3 4</span><br><span class=\"line\">      cap=9  16</span><br><span class=\"line\">      分析下等于9</span><br><span class=\"line\">      cap - 1  第一步结果8</span><br><span class=\"line\">      00000000000000000000000000001000    8</span><br><span class=\"line\">      00000000000000000000000000000100    右移1位 </span><br><span class=\"line\">      </span><br><span class=\"line\">      00000000000000000000000000001100    或运算 结果</span><br><span class=\"line\">      00000000000000000000000000000011    右移2位</span><br><span class=\"line\">      00000000000000000000000000001111    或运算 结果</span><br><span class=\"line\">                                          </span><br><span class=\"line\">      00000000000000000000000000001111    右移 4 8 16没用全是0结果还是这个15</span><br><span class=\"line\">      最终 +1   16</span><br><span class=\"line\">      </span><br><span class=\"line\">      分析下等于大点 12345678</span><br><span class=\"line\">      00000000101111000110000101001110  12345678</span><br><span class=\"line\">      00000000101111000110000101001101  -1结果   12345677</span><br><span class=\"line\">      00000000010111100011000010100110  右移1位 </span><br><span class=\"line\">      </span><br><span class=\"line\">      00000000111111100111000111101111  或运算 结果</span><br><span class=\"line\">      00000000001111111001110001111011  右移2位</span><br><span class=\"line\">      </span><br><span class=\"line\">      00000000111111111111110111111111  差不多了在移0就没了都是1了，+1不是肯定是2的倍数了</span><br><span class=\"line\">      </span><br><span class=\"line\">      再说开始-1原因这是为了防止，cap已经是2的幂。</span><br><span class=\"line\">      如果cap已经是2的幂， 又没有执行这个减1操作，则执行完后面的几条无符号右移操作之后，返回的capacity将是这个cap的2倍。如果不懂，要看完后面的几个无符号右移之后再回来看看</span><br></pre></td></tr></table></figure>\n<p>2.HashMap数组结构为什么用2的倍数<br>高速的索引计算，使用HashMap肯定是冲突越少越好，就要求分部均匀，最好的用取模 h % length，但是近一步如果用2的幂h &amp; (length - 1) == h % length 是等价的，效率缺差却别非常大<br>综合衡量用空间换了时间，且是值得的</p>\n<p>3.线程安全问题<br>线程不安全，就put来看全程没考虑线程问题，肯定不安全，现在随便并发一下resize会混乱吧，put链表，红黑树挂载基本都会出问题</p>\n","site":{"data":{}},"excerpt":"<p><font color=\"red\">本文转载自 <a href=\"https://www.cnblogs.com/zhaojj/p/7805376.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhaojj/p/7805376.html</a><font></font></font></p>\n<h4 id=\"目的：\"><a href=\"#目的：\" class=\"headerlink\" title=\"目的：\"></a>目的：</h4><p>单纯分析和学习hashmap的实现，不多说与Hashtable、ConcurrentHashMap等的区别。<br>基于 jdk1.8</p>\n<p>在面试中有些水平的公司比较喜欢问HashMap原理，其中涉及的点比较多，而且大多能形成连环炮形式的问题。</p>\n<p>一般连环炮，一环不知道后面试官也就不问了，但是低层连环没连上，恭喜扣分是大大的，连到比较深的时候，说不知道还好点，比如：</p>\n<p>关于集合的<br>1.1Hashmap是不是有序的？   不是继续</p>\n<p>1.2有没有有顺序的Map？     TreeMap  LinkedHashMap</p>\n<p>1.3它们是怎么来保证顺序的？   一般都要说到其源码，要不说不清为么有序</p>\n<p>1.4答两个有序或以上的 继续  你觉得它们有序的区别，那个比较好，在什么场景用哪个好？</p>\n<p>1.4答一个也可以问上面的场景  继续</p>\n<p>1.5你觉得有没有更好或者更高效的实现方式？有</p>\n<p>1.6 答有  这个时候说起来可能就要跑到底层数据结构上去了</p>\n<p>数据结构继续衍生 到 算法等等。。。</p>\n<p>就这一个遇到大佬问你，能把很多人连到怀疑人生<br></p>","more":"<p></p>\n<p>2.关于hash的</p>\n<p>1.1  hashmap基本的节点结构？  Node  键值对</p>\n<p>1.2  键是什么样的，我用字符串a那键就是a嘛？   不是会进行hash</p>\n<p>1.3  如何hash的  这样hash有什么好处？   源码hashmap的hash算法</p>\n<p>1.4  Hash在java中主要作用是什么？</p>\n<p>1.5  Hashcode  equal相关   需要同时重写？原因？</p>\n<p>1.6  equal引出的对象地址、string带有字符串缓冲区、字符串常量池</p>\n<p>等等。。。</p>\n<p>3.关于线程安全问题、到concurrent包等</p>\n<p>前面说这些就是想说，hashmap中用到的东西很多，深入学习和理解对每个想晋升的程序员来说基本是必须，同时由它引出的对比，也是无限多，有很大的必要学习。</p>\n<h4 id=\"HashMap类加载\"><a href=\"#HashMap类加载\" class=\"headerlink\" title=\"HashMap类加载\"></a>HashMap类加载</h4><p>1.只有一些静态属性会进行赋值，具体每个值什么用，暂时不管</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</span><br><span class=\"line\"></span><br><span class=\"line\">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class=\"line\"></span><br><span class=\"line\">static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class=\"line\"></span><br><span class=\"line\">static final int TREEIFY_THRESHOLD = 8;</span><br><span class=\"line\"></span><br><span class=\"line\">static final int UNTREEIFY_THRESHOLD = 6;</span><br><span class=\"line\"></span><br><span class=\"line\">static final int MIN_TREEIFY_CAPACITY = 64;</span><br></pre></td></tr></table></figure>\n<h4 id=\"开始使用，第一步我们肯定是初始化方法，先从默认的构造方法开始学习\"><a href=\"#开始使用，第一步我们肯定是初始化方法，先从默认的构造方法开始学习\" class=\"headerlink\" title=\"开始使用，第一步我们肯定是初始化方法，先从默认的构造方法开始学习\"></a>开始使用，第一步我们肯定是初始化方法，先从默认的构造方法开始学习</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public HashMap() &#123;</span><br><span class=\"line\">        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">1.AbstractMap父类，构造方法也没干事不谈</span><br><span class=\"line\">2.只是赋值loadFactor 0.75f 没干别的事</span><br><span class=\"line\">3.static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class=\"line\">4.loadFactor属性 作用先放着后面用到再看</span><br><span class=\"line\">5.没干别的事了</span><br></pre></td></tr></table></figure>\n<h4 id=\"一般我们的使用第二步就是put了\"><a href=\"#一般我们的使用第二步就是put了\" class=\"headerlink\" title=\"一般我们的使用第二步就是put了\"></a>一般我们的使用第二步就是put了</h4><p>先看常用的put键值对，这个学完了，那么其他的put方法就没什么问题了，比如putAll、putIfAbsent、putMapEntries</p>\n<p>同时put弄明白了 取值就是一个反向就简单了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public V put(K key, V value) &#123;</span><br><span class=\"line\">  return putVal(hash(key), key, value, false, true);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.先对key进行hash计算，学一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int hash(Object key) &#123;</span><br><span class=\"line\">    int h;</span><br><span class=\"line\">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">1.1 看出key是可以空的  hash为0</span><br><span class=\"line\">1.2 (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)   第一步取key的hashcode值  关于更底层的hashcode是什么 有兴趣再看</span><br><span class=\"line\">    h ^ (h &gt;&gt;&gt; 16)  第二步 高位参与运算</span><br><span class=\"line\">这个hash值的重要性就不说了，这里这么干是出于性能考虑，底层的移位和异或运算肯定比加减乘除取模等效率好 </span><br><span class=\"line\">hashcode是32位的，无符号右移16位，那生成的就是16位0加原高位的16位值， 就是对半了，异或计算也就变成了高16位和低16位进行异或，</span><br><span class=\"line\">原高16位不变。这么干主要用于当hashmap 数组比较小的时候所有bit都参与运算了，防止hash冲突太大，</span><br><span class=\"line\">所谓hash冲突是指不同的key计算出的hash是一样的，比如a和97，这个肯定是存在的没毛病</span><br></pre></td></tr></table></figure>\n<p>2.putVal </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">   * Implements Map.put and related methods</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param hash hash for key</span><br><span class=\"line\">   * @param key the key</span><br><span class=\"line\">   * @param value the value to put</span><br><span class=\"line\">   * @param onlyIfAbsent if true, don&apos;t change existing value   相同key是不是覆盖值</span><br><span class=\"line\">   * @param evict if false, the table is in creation mode.    在hashmap中没用</span><br><span class=\"line\">   * @return previous value, or null if none</span><br><span class=\"line\">   */</span><br><span class=\"line\">  final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class=\"line\">                 boolean evict) &#123;</span><br><span class=\"line\">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class=\"line\">      if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class=\"line\">          n = (tab = resize()).length;</span><br><span class=\"line\">      if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class=\"line\">          tab[i] = newNode(hash, key, value, null);</span><br><span class=\"line\">      else &#123;</span><br><span class=\"line\">          Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">          if (p.hash == hash &amp;&amp;</span><br><span class=\"line\">              ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">              e = p;</span><br><span class=\"line\">          else if (p instanceof TreeNode)</span><br><span class=\"line\">              e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class=\"line\">          else &#123;</span><br><span class=\"line\">              for (int binCount = 0; ; ++binCount) &#123;</span><br><span class=\"line\">                  if ((e = p.next) == null) &#123;</span><br><span class=\"line\">                      p.next = newNode(hash, key, value, null);</span><br><span class=\"line\">                      if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class=\"line\">                          treeifyBin(tab, hash);</span><br><span class=\"line\">                      break;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  if (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                      ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                      break;</span><br><span class=\"line\">                  p = e;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (e != null) &#123; // existing mapping for key</span><br><span class=\"line\">              V oldValue = e.value;</span><br><span class=\"line\">              if (!onlyIfAbsent || oldValue == null)</span><br><span class=\"line\">                  e.value = value;</span><br><span class=\"line\">              afterNodeAccess(e);</span><br><span class=\"line\">              return oldValue;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ++modCount;</span><br><span class=\"line\">      if (++size &gt; threshold)</span><br><span class=\"line\">          resize();</span><br><span class=\"line\">      afterNodeInsertion(evict);</span><br><span class=\"line\">      return null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  2.1 执行顺序</span><br><span class=\"line\">      第一句  Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; 申明变量</span><br><span class=\"line\">          Node是啥,学习一下：</span><br><span class=\"line\">              static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">                  final int hash;</span><br><span class=\"line\">                  final K key;</span><br><span class=\"line\">                  V value;</span><br><span class=\"line\">                  Node&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">                  Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">                      this.hash = hash;</span><br><span class=\"line\">                      this.key = key;</span><br><span class=\"line\">                      this.value = value;</span><br><span class=\"line\">                      this.next = next;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  public final K getKey()        &#123; return key; &#125;</span><br><span class=\"line\">                  public final V getValue()      &#123; return value; &#125;</span><br><span class=\"line\">                  public final String toString() &#123; return key + &quot;=&quot; + value; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  public final int hashCode() &#123;</span><br><span class=\"line\">                      return Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  public final V setValue(V newValue) &#123;</span><br><span class=\"line\">                      V oldValue = value;</span><br><span class=\"line\">                      value = newValue;</span><br><span class=\"line\">                      return oldValue;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  public final boolean equals(Object o) &#123;</span><br><span class=\"line\">                      if (o == this)</span><br><span class=\"line\">                          return true;</span><br><span class=\"line\">                      if (o instanceof Map.Entry) &#123;</span><br><span class=\"line\">                          Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class=\"line\">                          if (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class=\"line\">                              Objects.equals(value, e.getValue()))</span><br><span class=\"line\">                              return true;</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                      return false;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          是内部的一个静态类，看看就明白了，明显是一个带有3个值，hash、key、value和另一个Node对象引用的HashMap子元素结构，即我们装的每个键值对就用一个Node对象存放</span><br><span class=\"line\">          </span><br><span class=\"line\">      第二句 if ((tab = table) == null || (n = tab.length) == 0) 这句</span><br><span class=\"line\">          tab = table赋值，table现在是null的，so n = tab.length不运行了 运行这个if的代码块</span><br><span class=\"line\">      第三句 n = (tab = resize()).length;   从下面的执行知道 n=16</span><br><span class=\"line\">          调用resize()，返回Node数组，这个resize是一个非常重要的方法，我们就依现在的对象状态去看这个方法，不带入其他状态，认真研究学习下</span><br><span class=\"line\">              final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">                  Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">                  int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class=\"line\">                  int oldThr = threshold;</span><br><span class=\"line\">                  int newCap, newThr = 0;</span><br><span class=\"line\">                  if (oldCap &gt; 0) &#123;</span><br><span class=\"line\">                      if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">                          threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">                          return oldTab;</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                      else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                               oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">                          newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  else if (oldThr &gt; 0) // initial capacity was placed in threshold</span><br><span class=\"line\">                      newCap = oldThr;</span><br><span class=\"line\">                  else &#123;               // zero initial threshold signifies using defaults</span><br><span class=\"line\">                      newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">                      newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  if (newThr == 0) &#123;</span><br><span class=\"line\">                      float ft = (float)newCap * loadFactor;</span><br><span class=\"line\">                      newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                                (int)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  threshold = newThr;</span><br><span class=\"line\">                  @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class=\"line\">                      Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class=\"line\">                  table = newTab;</span><br><span class=\"line\">                  if (oldTab != null) &#123;</span><br><span class=\"line\">                      for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">                          Node&lt;K,V&gt; e;</span><br><span class=\"line\">                          if ((e = oldTab[j]) != null) &#123;</span><br><span class=\"line\">                              oldTab[j] = null;</span><br><span class=\"line\">                              if (e.next == null)</span><br><span class=\"line\">                                  newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class=\"line\">                              else if (e instanceof TreeNode)</span><br><span class=\"line\">                                  ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class=\"line\">                              else &#123; // preserve order</span><br><span class=\"line\">                                  Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class=\"line\">                                  Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class=\"line\">                                  Node&lt;K,V&gt; next;</span><br><span class=\"line\">                                  do &#123;</span><br><span class=\"line\">                                      next = e.next;</span><br><span class=\"line\">                                      if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class=\"line\">                                          if (loTail == null)</span><br><span class=\"line\">                                              loHead = e;</span><br><span class=\"line\">                                          else</span><br><span class=\"line\">                                              loTail.next = e;</span><br><span class=\"line\">                                          loTail = e;</span><br><span class=\"line\">                                      &#125;</span><br><span class=\"line\">                                      else &#123;</span><br><span class=\"line\">                                          if (hiTail == null)</span><br><span class=\"line\">                                              hiHead = e;</span><br><span class=\"line\">                                          else</span><br><span class=\"line\">                                              hiTail.next = e;</span><br><span class=\"line\">                                          hiTail = e;</span><br><span class=\"line\">                                      &#125;</span><br><span class=\"line\">                                  &#125; while ((e = next) != null);</span><br><span class=\"line\">                                  if (loTail != null) &#123;</span><br><span class=\"line\">                                      loTail.next = null;</span><br><span class=\"line\">                                      newTab[j] = loHead;</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                                  if (hiTail != null) &#123;</span><br><span class=\"line\">                                      hiTail.next = null;</span><br><span class=\"line\">                                      newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                              &#125;</span><br><span class=\"line\">                          &#125;</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  return newTab;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          resize  1.Node&lt;K,V&gt;[] oldTab = table; 在上面知道table是null的，so  oldTab也是null</span><br><span class=\"line\">                  2.int oldCap = (oldTab == null) ? 0 : oldTab.length;   oldCap=0</span><br><span class=\"line\">                  3.int oldThr = threshold;   threshold我们没赋值过，int初始0 ， oldThr=threshold=0</span><br><span class=\"line\">                  4.int newCap, newThr = 0;  不谈</span><br><span class=\"line\">                  5.if (oldCap &gt; 0) &#123;    oldCap=0  if不运行</span><br><span class=\"line\">                  6.else if (oldThr &gt; 0)  oldThr=0  if也不运行</span><br><span class=\"line\">                  7.else &#123;</span><br><span class=\"line\">                          newCap = DEFAULT_INITIAL_CAPACITY;       DEFAULT_INITIAL_CAPACITY静态成员变量，初始 static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4     so newCap=16</span><br><span class=\"line\">                          newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);   static final float DEFAULT_LOAD_FACTOR = 0.75f;   0.75*16=12   newThr=12</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  8.  if (newThr == 0) &#123;     newThr=12 if不运行</span><br><span class=\"line\">                  9.  threshold = newThr;    threshold = newThr=12</span><br><span class=\"line\">                  10. Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap]   申明一个16个大小的Node数组</span><br><span class=\"line\">                  11. table = newTab;   看出来了吧，table是成员变量，也就表明，HashMap初始数据结构是一个16的Node数组</span><br><span class=\"line\">                  12.  if (oldTab != null) &#123;   oldTab是1中赋值的null，if不运行</span><br><span class=\"line\">                  13.  return newTab;  返回16大小的node数组</span><br><span class=\"line\">              总结，这一波调用是初次调用其实没干别的事，就是定义了基本的数据结构是16个Node数组，但是这个方法不简单，因为一些if没走</span><br><span class=\"line\">              </span><br><span class=\"line\">      第四句     if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class=\"line\">          n=16   15&amp;hash 结果肯定是0-15，这里就看出，这是在计算一个key应该在整个数据结构16的数组中的索引了，并赋值给i变量，后面不管整体结构n变多大，这种计算key所在的索引是非常棒的设计。</span><br><span class=\"line\">          现在的状态是初始的 肯定是null的吧  if运行</span><br><span class=\"line\">          </span><br><span class=\"line\">      第五句 tab[i] = newNode(hash, key, value, null); new一个节点Node，放在数组里，i是第四句计算的索引</span><br><span class=\"line\">      第六句 else &#123;  不运行</span><br><span class=\"line\">      第七句  ++modCount;   transient int modCount; 根据注释可以看出，这个是记录数据结构变动次数的，put值肯定是变了的</span><br><span class=\"line\">      第八句  if (++size &gt; threshold)  size=1  threshold在调用resize时赋值12   if不运行</span><br><span class=\"line\">      第九句 afterNodeInsertion(evict);  没干事</span><br><span class=\"line\">      第十句   return null; 不谈</span><br></pre></td></tr></table></figure>\n<p>3.putVal 再回头详走,第一遍干了很多初始化的事有些东西还没研究到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class=\"line\">                 boolean evict) &#123;</span><br><span class=\"line\">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class=\"line\">      if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class=\"line\">          n = (tab = resize()).length;</span><br><span class=\"line\">      if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class=\"line\">          tab[i] = newNode(hash, key, value, null);</span><br><span class=\"line\">      else &#123;</span><br><span class=\"line\">          Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">          if (p.hash == hash &amp;&amp;</span><br><span class=\"line\">              ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">              e = p;</span><br><span class=\"line\">          else if (p instanceof TreeNode)</span><br><span class=\"line\">              e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class=\"line\">          else &#123;</span><br><span class=\"line\">              for (int binCount = 0; ; ++binCount) &#123;</span><br><span class=\"line\">                  if ((e = p.next) == null) &#123;</span><br><span class=\"line\">                      p.next = newNode(hash, key, value, null);</span><br><span class=\"line\">                      if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class=\"line\">                          treeifyBin(tab, hash);</span><br><span class=\"line\">                      break;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  if (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                      ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                      break;</span><br><span class=\"line\">                  p = e;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (e != null) &#123; // existing mapping for key</span><br><span class=\"line\">              V oldValue = e.value;</span><br><span class=\"line\">              if (!onlyIfAbsent || oldValue == null)</span><br><span class=\"line\">                  e.value = value;</span><br><span class=\"line\">              afterNodeAccess(e);</span><br><span class=\"line\">              return oldValue;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ++modCount;</span><br><span class=\"line\">      if (++size &gt; threshold)</span><br><span class=\"line\">          resize();</span><br><span class=\"line\">      afterNodeInsertion(evict);</span><br><span class=\"line\">      return null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      第一句  Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; 申明变量不谈</span><br><span class=\"line\">      第二句 if ((tab = table) == null || (n = tab.length) == 0) 这句</span><br><span class=\"line\">          tab = table赋值，table现在是16数组 n=16  if不运行</span><br><span class=\"line\">      第三句 if ((p = tab[i = (n - 1) &amp; hash]) == null) </span><br><span class=\"line\">          再看就知道了判断当前存的key计算出的索引位置是不是已经存过值了</span><br><span class=\"line\">          没存过就新Node存  和上面一遍一样   我们当已经有值了</span><br><span class=\"line\">          有值其实就意味着发生hash冲突了  比如key分别是a和97 hashCode都是97 冲突</span><br><span class=\"line\">          因此这次我们主要看下一个else里面HashMap是怎么处理冲突的</span><br><span class=\"line\">      第四句     else中内容  即冲突处理</span><br><span class=\"line\">          p是冲突时数组该索引位置的元素</span><br><span class=\"line\">              1. p.hash == hash &amp;&amp;((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))</span><br><span class=\"line\">                  判断新元素hash和key是不是都和p相同，相同表示存了一样的key</span><br><span class=\"line\">                  直接赋值给e</span><br><span class=\"line\">              2. p instanceof TreeNode（红黑树，具体的红黑树算法这里就不详细写了，有兴趣可以去学习）</span><br><span class=\"line\">                  怎么猛然来个红黑树，再3里说</span><br><span class=\"line\">                  判断原来元素是不是 TreeNode 类型</span><br><span class=\"line\">                  TreeNode一样是静态内部类，再看看就是红黑树的节点，因此这个地方用到了红黑树</span><br><span class=\"line\">                  putTreeVal 向红黑树中添加元素</span><br><span class=\"line\">                  内部实现，存在相同key就返回赋值给e  不存在就添加并返回null 源码就是红黑树算法</span><br><span class=\"line\">              3.key不同也不是红黑树</span><br><span class=\"line\">                   if ((e = p.next) == null) &#123;</span><br><span class=\"line\">                      p.next = newNode(hash, key, value, null);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  先不看再里面的那个if，这个一看就知道了吧，明显的链表啊，而且数据里的这个元素是链表头</span><br><span class=\"line\">                  整个循环，明显是在从头开始遍历链表，找到相同key或链表找完了新元素挂链表最后</span><br><span class=\"line\">                  </span><br><span class=\"line\">                  但在其中还有这么个if</span><br><span class=\"line\">                      if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class=\"line\">                          treeifyBin(tab, hash);</span><br><span class=\"line\">                      break;</span><br><span class=\"line\">                      这是在链表找完了，且新元素已经挂在链表最后了有的一个判断</span><br><span class=\"line\">                      判断循环次数，其实就是链表长度，长度超过TREEIFY_THRESHOLD 默认8则运行treeifyBin(tab, hash);</span><br><span class=\"line\">                  就是这个方法把链表变成红黑树了，具体方法源码不谈了，学红黑树就可以了</span><br><span class=\"line\">          </span><br><span class=\"line\">          最后判断e是不是空，上面的冲突方案看出e不是空就是表示有相同的key进行value覆盖就可以，e空就是无相同key且完成了数据挂载</span><br><span class=\"line\">          </span><br><span class=\"line\">      </span><br><span class=\"line\">      总结这次再走一遍putVal就是为了学习HashMap的冲突处理方案，也看出内存结构是数组、链表、红黑树组成的，红黑树是java8新引进，是基于性能的考虑，在冲突大时，红黑树算法会比链表综合表现更好</span><br></pre></td></tr></table></figure>\n<p>4.resize 再详走 putVal最后一段size&gt;threshold  threshold初始12 ++size元素数量肯定会有超12个的时候，<br>这里也就看出了threshold代表HashMap的容量，到上限就要扩容了，默认现在16数组，12元素上限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Node&lt;K,V&gt;[] oldTab = table;  16大小</span><br><span class=\"line\">      2.int oldCap = (oldTab == null) ? 0 : oldTab.length;   oldCap=16</span><br><span class=\"line\">      3.int oldThr = threshold;     12</span><br><span class=\"line\">      4.int newCap, newThr = 0;  不谈</span><br><span class=\"line\">      5.if (oldCap &gt; 0) &#123;         oldCap=16运行  oldCap是整体结构数组大小</span><br><span class=\"line\">              if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;    判断数组大小是不是已经到上限1&lt;&lt;30</span><br><span class=\"line\">                  threshold = Integer.MAX_VALUE;  到达上线 threshold 赋值最大值 然后返回 表示之后就不再干别的事了，随便存，随便hash冲突去，就这么大，无限增加红黑树节点了</span><br><span class=\"line\">                  return oldTab;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                       oldCap &gt;= DEFAULT_INITIAL_CAPACITY)   赋值newCap为2倍数组大小，判断如果扩充2倍有没到上限，且不扩充时容量是否大于默认的16</span><br><span class=\"line\">                  newThr = oldThr &lt;&lt; 1; // double threshold   满足则赋值  容量改为24</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          这段看出到threshold容量了就进行2倍扩容</span><br><span class=\"line\">      6.if (newThr == 0) &#123;    如果运行该if 0 表示5步中扩容2倍到上限或原数组大小小于16</span><br><span class=\"line\">          float ft = (float)newCap * loadFactor;      newCap现在是2倍原大小的*0.75   2倍数组大小时的容量</span><br><span class=\"line\">          newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                    (int)ft : Integer.MAX_VALUE);     判断2倍数组大小和2倍后的容量是不是都小于最高值，是则赋值新容量，不是就用整形最大值</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      7.  threshold = newThr;  把5 6两步算出的新容量赋值给HashMap  也说明要扩容了</span><br><span class=\"line\">      8.   Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class=\"line\">          和后面的循环主要就是把原数组中的元素，一个一个添加到新数组中，转移的一个过程</span><br><span class=\"line\">      </span><br><span class=\"line\">  总结，这一波调用是了解HashMap的扩容方式，看下来就是2倍扩容直到上限</span><br></pre></td></tr></table></figure>\n<p>5.总结，到这put就比较详细了，也知道了基本结构是数组、链表、红黑树，链表到8个时转换成红黑树<br>同时每次进行2倍扩容和数据转移，扩容是用新结构的那显然减少扩容次数会有更好的性能<br>那就要求每次声明HashMap时最好是指定大小的</p>\n<h4 id=\"一些其他我们需要知道的\"><a href=\"#一些其他我们需要知道的\" class=\"headerlink\" title=\"一些其他我们需要知道的\"></a>一些其他我们需要知道的</h4><p>1.指定大小的初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public HashMap(int initialCapacity) &#123;</span><br><span class=\"line\">      this(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public HashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class=\"line\">      if (initialCapacity &lt; 0)</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +</span><br><span class=\"line\">                                             initialCapacity);</span><br><span class=\"line\">      if (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">          initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">      if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +</span><br><span class=\"line\">                                             loadFactor);</span><br><span class=\"line\">      this.loadFactor = loadFactor;</span><br><span class=\"line\">      this.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  第一个常用，第二个建议是不用，不去动0.75的这个容量比例，当然不绝对</span><br><span class=\"line\">  这里tableSizeFor是一个很神奇的算法，我非常佩服的一个算法</span><br><span class=\"line\">      static final int tableSizeFor(int cap) &#123;</span><br><span class=\"line\">          int n = cap - 1;</span><br><span class=\"line\">          n |= n &gt;&gt;&gt; 1;</span><br><span class=\"line\">          n |= n &gt;&gt;&gt; 2;</span><br><span class=\"line\">          n |= n &gt;&gt;&gt; 4;</span><br><span class=\"line\">          n |= n &gt;&gt;&gt; 8;</span><br><span class=\"line\">          n |= n &gt;&gt;&gt; 16;</span><br><span class=\"line\">          return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      这个方法是在找大于等于cap且最小2的幂</span><br><span class=\"line\">      比如cap=1   结果 2 0次方 1</span><br><span class=\"line\">      cap=2  2</span><br><span class=\"line\">      cap=3 4</span><br><span class=\"line\">      cap=9  16</span><br><span class=\"line\">      分析下等于9</span><br><span class=\"line\">      cap - 1  第一步结果8</span><br><span class=\"line\">      00000000000000000000000000001000    8</span><br><span class=\"line\">      00000000000000000000000000000100    右移1位 </span><br><span class=\"line\">      </span><br><span class=\"line\">      00000000000000000000000000001100    或运算 结果</span><br><span class=\"line\">      00000000000000000000000000000011    右移2位</span><br><span class=\"line\">      00000000000000000000000000001111    或运算 结果</span><br><span class=\"line\">                                          </span><br><span class=\"line\">      00000000000000000000000000001111    右移 4 8 16没用全是0结果还是这个15</span><br><span class=\"line\">      最终 +1   16</span><br><span class=\"line\">      </span><br><span class=\"line\">      分析下等于大点 12345678</span><br><span class=\"line\">      00000000101111000110000101001110  12345678</span><br><span class=\"line\">      00000000101111000110000101001101  -1结果   12345677</span><br><span class=\"line\">      00000000010111100011000010100110  右移1位 </span><br><span class=\"line\">      </span><br><span class=\"line\">      00000000111111100111000111101111  或运算 结果</span><br><span class=\"line\">      00000000001111111001110001111011  右移2位</span><br><span class=\"line\">      </span><br><span class=\"line\">      00000000111111111111110111111111  差不多了在移0就没了都是1了，+1不是肯定是2的倍数了</span><br><span class=\"line\">      </span><br><span class=\"line\">      再说开始-1原因这是为了防止，cap已经是2的幂。</span><br><span class=\"line\">      如果cap已经是2的幂， 又没有执行这个减1操作，则执行完后面的几条无符号右移操作之后，返回的capacity将是这个cap的2倍。如果不懂，要看完后面的几个无符号右移之后再回来看看</span><br></pre></td></tr></table></figure>\n<p>2.HashMap数组结构为什么用2的倍数<br>高速的索引计算，使用HashMap肯定是冲突越少越好，就要求分部均匀，最好的用取模 h % length，但是近一步如果用2的幂h &amp; (length - 1) == h % length 是等价的，效率缺差却别非常大<br>综合衡量用空间换了时间，且是值得的</p>\n<p>3.线程安全问题<br>线程不安全，就put来看全程没考虑线程问题，肯定不安全，现在随便并发一下resize会混乱吧，put链表，红黑树挂载基本都会出问题</p>"}],"PostAsset":[{"_id":"source/_posts/Redis相关/1481291-20180925141429889-1694430603.png","slug":"1481291-20180925141429889-1694430603.png","post":"cjszwekqf000r5okblojaxb7q","modified":0,"renderable":0},{"_id":"source/_posts/Redis相关/1481291-20180925141527592-2105439510.png","slug":"1481291-20180925141527592-2105439510.png","post":"cjszwekqf000r5okblojaxb7q","modified":0,"renderable":0},{"_id":"source/_posts/Redis相关/1481291-20180925142100480-1152515615.png","slug":"1481291-20180925142100480-1152515615.png","post":"cjszwekqf000r5okblojaxb7q","modified":0,"renderable":0},{"_id":"source/_posts/Redis相关/1481291-20180925142118041-1727225479.png","slug":"1481291-20180925142118041-1727225479.png","post":"cjszwekqf000r5okblojaxb7q","modified":0,"renderable":0},{"_id":"source/_posts/Redis相关/1481291-20180925142143478-1454265814.png","slug":"1481291-20180925142143478-1454265814.png","post":"cjszwekqf000r5okblojaxb7q","modified":0,"renderable":0},{"_id":"source/_posts/Redis相关/1481291-20180925142206124-913246424.png","slug":"1481291-20180925142206124-913246424.png","post":"cjszwekqf000r5okblojaxb7q","modified":0,"renderable":0},{"_id":"source/_posts/Redis相关/1481291-20180925142304757-1498788186.png","slug":"1481291-20180925142304757-1498788186.png","post":"cjszwekqf000r5okblojaxb7q","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjszwekgt00025okbvzmfqpli","category_id":"cjszwekh200055okb1ugc5n41","_id":"cjszweki0000e5okbvynbc4ay"},{"post_id":"cjszwekgz00045okbcn1m6i70","category_id":"cjszwekh200055okb1ugc5n41","_id":"cjszweki3000h5okbb8s07n6m"},{"post_id":"cjszwekh500085okbs2wx6tch","category_id":"cjszwekh200055okb1ugc5n41","_id":"cjszweki4000k5okb7i2sjqef"},{"post_id":"cjszwekqf000r5okblojaxb7q","category_id":"cjszwekh200055okb1ugc5n41","_id":"cjszwekqi000t5okbbar0x8t3"},{"post_id":"cjszwekxu000x5okb7uvxt28o","category_id":"cjszwekxw000y5okbrcii1zhb","_id":"cjszwekxw00115okbjwpipy40"}],"PostTag":[{"post_id":"cjszwekgt00025okbvzmfqpli","tag_id":"cjszwekh400065okbwevng6bh","_id":"cjszweki2000g5okbqqg2phyd"},{"post_id":"cjszwekgt00025okbvzmfqpli","tag_id":"cjszwekhb000c5okbpyexfka2","_id":"cjszweki3000i5okbe5wsjyxf"},{"post_id":"cjszwekgz00045okbcn1m6i70","tag_id":"cjszweki0000f5okb36b6lvwj","_id":"cjszweki6000n5okbj8dnettl"},{"post_id":"cjszwekgz00045okbcn1m6i70","tag_id":"cjszweki3000j5okbehjc7q5j","_id":"cjszweki7000o5okbo8tac094"},{"post_id":"cjszwekgz00045okbcn1m6i70","tag_id":"cjszweki4000l5okb6q0qx12x","_id":"cjszweki7000p5okb3bilolvm"},{"post_id":"cjszwekh500085okbs2wx6tch","tag_id":"cjszweki5000m5okb67tfqrw7","_id":"cjszweki7000q5okb0dewwav2"},{"post_id":"cjszwekqf000r5okblojaxb7q","tag_id":"cjszwekqh000s5okbqfduhde8","_id":"cjszwekqk000v5okb52z2pegg"},{"post_id":"cjszwekqf000r5okblojaxb7q","tag_id":"cjszwekqj000u5okbexkyulzf","_id":"cjszwekqk000w5okbdfp0af8r"},{"post_id":"cjszwekxu000x5okb7uvxt28o","tag_id":"cjszwekxw000z5okbb4oh2m0h","_id":"cjszwekxw00105okbr89e1bse"}],"Tag":[{"name":"Java","_id":"cjszwekh400065okbwevng6bh"},{"name":"HttpClient","_id":"cjszwekhb000c5okbpyexfka2"},{"name":"JS","_id":"cjszweki0000f5okb36b6lvwj"},{"name":"javascript","_id":"cjszweki3000j5okbehjc7q5j"},{"name":"跨域","_id":"cjszweki4000l5okb6q0qx12x"},{"name":"git","_id":"cjszweki5000m5okb67tfqrw7"},{"name":"redis","_id":"cjszwekqh000s5okbqfduhde8"},{"name":"Key-Value数据库","_id":"cjszwekqj000u5okbexkyulzf"},{"name":"HashMap","_id":"cjszwekxw000z5okbb4oh2m0h"}]}}